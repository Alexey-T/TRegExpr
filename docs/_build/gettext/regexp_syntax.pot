# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Andrey Sorokin
# This file is distributed under the same license as the TRegExpr package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TRegExpr 0.952\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-03 20:19+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../regexp_syntax.rst:2
# aa6e3c22db524b60846b1fa6ea87b986
msgid "Regular expressions"
msgstr ""

#: ../../regexp_syntax.rst:5
# f59a7e2d99ed41ae82b74577fa88af4c
msgid "Introduction"
msgstr ""

#: ../../regexp_syntax.rst:7
# 8b38ddb668cd4b05bb73e1f9f3b851b9
msgid "Regular expressions are a handy way to specify patterns of text."
msgstr ""

#: ../../regexp_syntax.rst:10
# a270d6a6c96c412a9107266365aaebc4
msgid "So you can validate user input, search for some patterns like emails of phone numbers on web pages or in some documents and so on."
msgstr ""

#: ../../regexp_syntax.rst:13
# 85859a31a678423ca2e30562c6d8dd1b
msgid "Below is complete regular expressions cheat sheet just on one page. This is regular expressions that are implemented for example in `TRegExpr <tregexpr_interface.html>`_."
msgstr ""

#: ../../regexp_syntax.rst:18
# 4ea6c0e1bfa2455794c9fcea646235e6
msgid "Simple matches"
msgstr ""

#: ../../regexp_syntax.rst:20
# b727fca2355b4a05bdaedc91737a4a71
msgid "Any single character matches itself."
msgstr ""

#: ../../regexp_syntax.rst:22
# 7a42dd79705641f0b9765b1b3d3f3f12
msgid "A series of characters matches that series of characters in the target string, so the pattern ``bluh`` would match ``bluh`` in the target string."
msgstr ""

#: ../../regexp_syntax.rst:30
# 9f6a1f35c90f4dd2942104d776b07b45
msgid "If you want to use some symbol with special meaning (see below) as plain symbol you have to \"escape\" it with backslash ``\\``:"
msgstr ""

#: ../../regexp_syntax.rst:38
# 379d188734234be995168022765d361d
msgid "Non-Printable Characters"
msgstr ""

#: ../../regexp_syntax.rst:41
# 44eca01f40e34c40b674024024556a1c
msgid "``\\xnn``"
msgstr ""

#: ../../regexp_syntax.rst:41
# 46c8636c4a8c42b4a91777e1dc8de378
msgid "matches character with hex code ``nn``"
msgstr ""

#: ../../regexp_syntax.rst:42
# 363c2d54eda246858c6400820e122798
msgid "``\\x{nnnn}``"
msgstr ""

#: ../../regexp_syntax.rst:42
# d193c283801f4a65a748fc26b2f96d65
msgid "matches character with hex code ``nnnn`` (one byte for plain text and two bytes for Unicode)"
msgstr ""

#: ../../regexp_syntax.rst:50
# 405695627ec84155b387b164c5fc155c
msgid "There are a number of predefined non-printable character classes just like in ``C`` language:"
msgstr ""

#: ../../regexp_syntax.rst:54
# 1c2436f9a2814daea97c4cef4b54c638
msgid "``\\t``"
msgstr ""

#: ../../regexp_syntax.rst:54
# 6dd58e2460c246a68aae13ab37e57a74
msgid "tab (HT/TAB), same as ``\\x09``"
msgstr ""

#: ../../regexp_syntax.rst:55
# e4a1a1aff1cd41f5a0a039dc3a5e8764
msgid "``\\n``"
msgstr ""

#: ../../regexp_syntax.rst:55
# 014acab05bec486da15a9dcfe7701889
msgid "newline (NL), same as ``\\x0a``"
msgstr ""

#: ../../regexp_syntax.rst:56
# cf79e3fe9b7e40d4b12217710008cda4
msgid "``\\r``"
msgstr ""

#: ../../regexp_syntax.rst:56
# 4489042dc4a841649dadf3cd693b79a6
msgid "car.return (CR), same as ``\\x0d``"
msgstr ""

#: ../../regexp_syntax.rst:57
# 281cbafde3fb4c61833e3f12d19d0461
msgid "``\\f``"
msgstr ""

#: ../../regexp_syntax.rst:57
# 76cdd368d5314a02901373bcbddcad3b
msgid "form feed (FF), same as ``\\x0c``"
msgstr ""

#: ../../regexp_syntax.rst:58
# 662bbe187a0e4d358418f16ffff91e6b
msgid "``\\a``"
msgstr ""

#: ../../regexp_syntax.rst:58
# e0d148dd4ae64e7891ab43b853ee5cbe
msgid "alarm (BEL), same as ``\\x07``"
msgstr ""

#: ../../regexp_syntax.rst:59
# e070e2246269437ba549472369efd022
msgid "``\\e``"
msgstr ""

#: ../../regexp_syntax.rst:59
# 5cd0c00beaff4ad0b7f6ebc8bd9acee5
msgid "escape (ESC), same as ``\\x1b``"
msgstr ""

#: ../../regexp_syntax.rst:63
# 3e32eb6ac6144c4d80b075e8ad5e44fd
msgid "User Character Classes"
msgstr ""

#: ../../regexp_syntax.rst:65
# 99c4b0cfb5f9447a93c55e281d2426ed
msgid "You can specify character class, by enclosing a list of characters in ``[]``. This class will match any **one** character listed inside ``[]``."
msgstr ""

#: ../../regexp_syntax.rst:68
# a39f8e8ec20d4a9cad93f2828b7a7a8f
msgid "If the first character after the ``[`` is ``^``, the class matches any character **but** characters listed in the class."
msgstr ""

#: ../../regexp_syntax.rst:76
# 55e948458d154686bc68edd9693db16e
msgid "Within a list, the ``-`` character is used to specify a range, so that ``a-z`` represents all characters between ``a`` and ``z``, inclusive."
msgstr ""

#: ../../regexp_syntax.rst:79
# 60942a70eff042b1b4b607b0df0d70d2
msgid "If you want ``-`` itself to be a member of a class, put it at the start or end of the list, or escape it with a backslash. If you want ``]`` you may place it at the start of list or escape it with a backslash."
msgstr ""

#: ../../regexp_syntax.rst:92
# 3e32eb6ac6144c4d80b075e8ad5e44fd
msgid "Predefined Character classes"
msgstr ""

#: ../../regexp_syntax.rst:95
# e9cf7f033ca641b0add4e4a82fbf7d95
msgid "``\\w``"
msgstr ""

#: ../../regexp_syntax.rst:95
# 2f3c970a9bc642f4a5288e9e3d03687f
msgid "an alphanumeric character (including \"_\")"
msgstr ""

#: ../../regexp_syntax.rst:96
# 30105093206d4dcab92e368ddb94eabe
msgid "``\\W``"
msgstr ""

#: ../../regexp_syntax.rst:96
# 3ce4cb92e41748be8fc64bb6265b7f0d
msgid "a nonalphanumeric"
msgstr ""

#: ../../regexp_syntax.rst:97
# df57a92f15a7409db120efc7d552a3bc
msgid "``\\d``"
msgstr ""

#: ../../regexp_syntax.rst:97
# 9e00e94893a64322bd643ea880763cff
msgid "a numeric character"
msgstr ""

#: ../../regexp_syntax.rst:98
# 1a17245745b3418f9c6ed02fabc1abc0
msgid "``\\D``"
msgstr ""

#: ../../regexp_syntax.rst:98
# 6db6ad991b764f3bae7857ebf8e16883
msgid "a non-numeric"
msgstr ""

#: ../../regexp_syntax.rst:99
# 03588588dd1b499f9c521e8b9896679b
msgid "``\\s``"
msgstr ""

#: ../../regexp_syntax.rst:99
# c1733b9171af4b6387cbb14286e506ed
msgid "any space (same as [ \\t\\n\\r\\f])"
msgstr ""

#: ../../regexp_syntax.rst:100
# a1a5113a7ef14e04b2b49e585c8a6dc1
msgid "``\\S``"
msgstr ""

#: ../../regexp_syntax.rst:100
# 21076843e1ec46acb9431646c227d424
msgid "a non space"
msgstr ""

#: ../../regexp_syntax.rst:103
# 44495071157f415bbf138800e2a5beb0
msgid "You may use ``\\w``, ``\\d`` and ``\\s`` within `user character classes <User Character Classes_>`_."
msgstr ""

#: ../../regexp_syntax.rst:110
# 6bea053f0752406687c4726fa59f70fb
msgid "TRegExpr uses properties `SpaceChars <tregexpr_interface.html#spacechars>`_ and `WordChars <tregexpr_interface.html#wordchars>`_ to define character classes ``\\w``, ``\\W``, ``\\s``, ``\\S``, so you can easely redefine it."
msgstr ""

#: ../../regexp_syntax.rst:117
# a07329be340945ea8edd4cd5d258b969
msgid "Metacharacters"
msgstr ""

#: ../../regexp_syntax.rst:119
# c95fa60048ed4d64a00309f5404470c4
msgid "Metacharacters are special characters which are the essence of Regular Expressions. There are different types of metacharacters, described below."
msgstr ""

#: ../../regexp_syntax.rst:124
# a07329be340945ea8edd4cd5d258b969
msgid "Line separators"
msgstr ""

#: ../../regexp_syntax.rst:127
# f5f10adaf5cd4b9aac30860c4d87db8c
msgid "``^``"
msgstr ""

#: ../../regexp_syntax.rst:127
# 252b8a6700654de29747aa19cd60e2a6
msgid "start of line"
msgstr ""

#: ../../regexp_syntax.rst:128
# 7c7c7e3ad9a5468f935dd8080fb0c5fe
msgid "``$``"
msgstr ""

#: ../../regexp_syntax.rst:128
# e6ab18c3e90d46e39e445e6173e69d9d
msgid "end of line"
msgstr ""

#: ../../regexp_syntax.rst:129
# d37a4a5a5fc64b6397c4d8f1e374ee60
msgid "``\\A``"
msgstr ""

#: ../../regexp_syntax.rst:129
# 10cf172be633491fbaa46c7c69d5d1d0
msgid "start of text"
msgstr ""

#: ../../regexp_syntax.rst:130
# 93882f5e26dc4920859bb6a16e0ba663
msgid "``\\Z``"
msgstr ""

#: ../../regexp_syntax.rst:130
# dd6c480d6308459fa4da91da44aeb2de
msgid "end of text"
msgstr ""

#: ../../regexp_syntax.rst:131
# 6697928aa4e14755b090220368c23a39
msgid "``.``"
msgstr ""

#: ../../regexp_syntax.rst:131
# d93b2586f3864904850c6176b1cf66df
msgid "any character in line"
msgstr ""

#: ../../regexp_syntax.rst:141
# 213b04c3d85244cab2561440188fd166
msgid "The ``^`` metacharacter by default is matchthe beginning of the input string, the ``$`` at the end."
msgstr ""

#: ../../regexp_syntax.rst:145
# ed87bfa235224adf9fa9830b2477711f
msgid "You may, however, wish to treat a string as a multi-line text, so ``^`` will match after any line separator within the string, and ``$`` will match before any line separator. You can do this by switching ``On`` the `modifier /m <#m>`_."
msgstr ""

#: ../../regexp_syntax.rst:150
# fa6af706326b4f4ebdb8921bd79369cd
msgid "The ``\\A`` and ``\\Z`` are just like ``^`` and ``$``, except that they won’t match multiple times when the `modifier /m <#m>`_ is used."
msgstr ""

#: ../../regexp_syntax.rst:154
# 870ba883c46d4caa8479873e139518bc
msgid "The ``.`` metacharacter by default matches any character, but if you switch ``Off`` the `modifier /s <#s>`_, then ``.`` won’t match embedded line separators."
msgstr ""

#: ../../regexp_syntax.rst:159
# 509fcee5caf24372b074d12b7902d9f8
msgid "Tech details"
msgstr ""

#: ../../regexp_syntax.rst:161
# 24b7172cc99045a68054dfd2623da3fc
msgid "TRegExpr works with line separators as recommended at `www.unicode.org <http://www.unicode.org/unicode/reports/tr18/>`__:"
msgstr ""

#: ../../regexp_syntax.rst:164
# 3bd8d69e73764aed8af762c1866a0514
msgid "``^`` is at the beginning of a input string, and, if `modifier /m <#m>`_ is On, also immediately following any occurrence of ``\\x0D\\x0A`` or ``\\x0A`` or ``\\x0D`` (if you are using `Unicode version <tregexpr_interface.html#unicode>`__ of TRegExpr, then also ``\\x2028`` or  ``\\x2029`` or ``\\x0B`` or ``\\x0C`` or ``\\x85``). Note that there is no empty line within the sequence ``\\x0D\\x0A``."
msgstr ""

#: ../../regexp_syntax.rst:171
# 2789416bbbad462186fbef55328265d1
msgid "``$`` is at the end of a input string, and, if `modifier /m <#m>`_ is On, also immediately preceding any occurrence of  ``\\x0D\\x0A`` or ``\\x0A`` or ``\\x0D`` (if you are using `Unicode version <tregexpr_interface.html#unicode>`__ of TRegExpr, then also ``\\x2028`` or  ``\\x2029`` or ``\\x0B`` or ``\\x0C`` or ``\\x85``). Note that there is no empty line within the sequence ``\\x0D\\x0A``."
msgstr ""

#: ../../regexp_syntax.rst:179
# ede57b818ab74d3e967cda0c170d5a32
msgid "``.`` matchs any character, but if you switch Off `modifier /s <#s>`_ then ``.`` doesn’t match ``\\x0D\\x0A`` and ``\\x0A`` and ``\\x0D`` (if you are using `Unicode version <tregexpr_interface.html#unicode>`__ of TRegExpr, then also ``\\x2028`` and  ``\\x2029`` and ``\\x0B`` and ``\\x0C`` and ``\\x85``)."
msgstr ""

#: ../../regexp_syntax.rst:185
# f81e8471526e433dac99ecba23596cec
msgid "Note that ``^.*$`` (an empty line pattern) does not match the empty string within the sequence ``\\x0D\\x0A``, but matchs the empty string within the sequence ``\\x0A\\x0D``."
msgstr ""

#: ../../regexp_syntax.rst:189
# 34f4cb335eb246e78555c6de9e183ea5
msgid "Multiline processing can be easely tuned for your own purpose with help of TRegExpr properties `LineSeparators <tregexpr_interface.html#lineseparators>`_ and `LinePairedSeparator <tregexpr_interface.html#linepairedseparator>`_, you can use only Unix style separators ``\\n`` or only DOS/Windows style ``\\r\\n`` or mix them together (as described above and used by default) or define your own line separators!"
msgstr ""

#: ../../regexp_syntax.rst:198
# 81e3066e722f4adfb9bb68c941260b11
msgid "Word boundaries"
msgstr ""

#: ../../regexp_syntax.rst:205
# d74e1b5ab0794b27875247d4588aed0b
msgid "A word boundary ``\\b`` is a spot between two characters that has a ``\\w`` on one side of it and a ``\\W`` on the other side of it (in either order), counting the imaginary characters off the beginning and end of the string as matching a ``\\W``."
msgstr ""

#: ../../regexp_syntax.rst:211
# a07329be340945ea8edd4cd5d258b969
msgid "Iterators"
msgstr ""

#: ../../regexp_syntax.rst:213
# 04acda6d45cc4d9fb1bcd696cae8e926
msgid "Any item of a regular expression may be followed by iterator. Iterator specify number of repetition of the item."
msgstr ""

#: ../../regexp_syntax.rst:231
# 65658743edec4131af85fbd64959dfe5
msgid "So, digits in curly brackets ``{n,m}``, specify the minimum number of times to match ``n`` and the maximum ``m``."
msgstr ""

#: ../../regexp_syntax.rst:234
# 7083fd33a7e040e3b3be29d9c829ebbc
msgid "The ``{n}`` is equivalent to ``{n,n}`` and matches exactly ``n`` times."
msgstr ""

#: ../../regexp_syntax.rst:236
# 957a3ac1c4f24f719fa5983197f653e5
msgid "The ``{n,}`` matches ``n`` or more times."
msgstr ""

#: ../../regexp_syntax.rst:238
# 312805d4873842c7b1f0f748e6f618c5
msgid "There is no limit to the size of ``n`` or ``m``, but large numbers will chew up more memory and slow down r.e. execution."
msgstr ""

#: ../../regexp_syntax.rst:242
# 13f1f9fee226460bbcdc883a5737304a
msgid "If a curly bracket occurs in any other context, it is treated as a regular character."
msgstr ""

#: ../../regexp_syntax.rst:256
# 55e370c749bb49cf9832463f0cee7887
msgid "Greediness"
msgstr ""

#: ../../regexp_syntax.rst:258
# 5f164e416b99414096ab1161392c065c
msgid "“Greedy” (default) mode takes as many as possible, “non-greedy” takes as few as possible."
msgstr ""

#: ../../regexp_syntax.rst:260
# 89d9da7f46c84cdb85f35ccd343ea378
msgid "For example, ``b+`` applied to string ``abbbbc`` returns ``bbbb``."
msgstr ""

#: ../../regexp_syntax.rst:262
# ba0609a7e0d3463d9191128af1b41f3f
msgid "``b+?`` returns ``b``, ``b*?`` returns empty string."
msgstr ""

#: ../../regexp_syntax.rst:264
# 273b3453a56b42d187c64be4c9e0736f
msgid "``b{2,3}?`` returns ``bb``, ``b{2,3}`` returns ``bbb``."
msgstr ""

#: ../../regexp_syntax.rst:266
# b66beb64fd70451399aefc3097936d11
msgid "You can switch all iterators into “non-greedy” mode (`modifier /g <#g>`_)."
msgstr ""

#: ../../regexp_syntax.rst:269
# d93b2586f3864904850c6176b1cf66df
msgid "Alternatives"
msgstr ""

#: ../../regexp_syntax.rst:271
# e14b0ac2ce974b1e9a163734d6e15de5
msgid "Series of alternatives are separated by ``|``."
msgstr ""

#: ../../regexp_syntax.rst:273
# 9505557ec40a4628bcf209ff7addb560
msgid "So ``fee|fie|foe`` will match any of ``fee``, ``fie``, or ``foe`` in the target string (as would ``f(e|i|o)e``)."
msgstr ""

#: ../../regexp_syntax.rst:276
# 4ab43a2c82ca4645bba942b595d4fe7b
msgid "The first alternative includes everything from the last pattern delimiter (``(``, ``[``, or the beginning of the pattern) up to the first ``|``, and the last alternative contains everything from the last ``|`` to the next pattern delimiter."
msgstr ""

#: ../../regexp_syntax.rst:281
# 1c4544867c1948b3bfafe3b25ce0e272
msgid "Sounds a little complicated, so it’s common practice to include alternatives in parentheses, to minimize confusion about where they start and end."
msgstr ""

#: ../../regexp_syntax.rst:285
# 2681a9d2b8e44d26921f4fd32e2ea2db
msgid "Alternatives are tried from left to right, so the first alternative found for which the entire expression matches, is the one that is chosen."
msgstr ""

#: ../../regexp_syntax.rst:289
# 80eb9ab2149844699b57da6986e70671
msgid "This means that alternatives are not necessarily ``greedy``. For example, regular expression ``foo|foot`` in string ``barefoot`` will match ``foo``. Just a first alternative that's match."
msgstr ""

#: ../../regexp_syntax.rst:293
# 7b0db3f69a174600bf34bfe25b261511
msgid "Also remember that ``|`` is interpreted as a literal within square brackets, so if you write ``[fee|fie|foe]`` you’re really only matching ``[feio|]``."
msgstr ""

#: ../../regexp_syntax.rst:302
# aa64c2f338a04b289fe78d3cfa633298
msgid "Subexpressions"
msgstr ""

#: ../../regexp_syntax.rst:304
# 860e411631de43199768e5f102caa53f
msgid "The brackets ``( ... )`` may also be used to define regular expression subexpressions."
msgstr ""

#: ../../regexp_syntax.rst:307
# 52c6047525cb405a8224e9cea120506d
msgid "Subexpression positions, lengths and actual values will be in `MatchPos <tregexpr_interface.html#matchpos>`_, `MatchLen <tregexpr_interface.html#matchlen>`_ and `Match <tregexpr_interface.html#match>`_."
msgstr ""

#: ../../regexp_syntax.rst:312
# 62e9e88af070460883b9f0a5b68accf9
msgid "You can substitute them with `Substitute <tregexpr_interface.html#substitute>`_)."
msgstr ""

#: ../../regexp_syntax.rst:315
# 3ad9d40bb6e44a82b47121d71ca31d07
msgid "Subexpressions are numbered from left to right by their opening parenthesis (including nested subexpressions)."
msgstr ""

#: ../../regexp_syntax.rst:318
# 62e9e88af070460883b9f0a5b68accf9
msgid "First subexpression has number ``1``. Whole regular expression match has number ``0``."
msgstr ""

#: ../../regexp_syntax.rst:325
# 55e370c749bb49cf9832463f0cee7887
msgid "Backreferences"
msgstr ""

#: ../../regexp_syntax.rst:327
# 6b83dd2925a94284a63aaa9cf83558b4
msgid "Metacharacters ``\\1`` through ``\\9`` are interpreted as backreferences. ``\\n`` matches previously matched subexpression ``n``."
msgstr ""

#: ../../regexp_syntax.rst:335
# acc26861fb344313bdecdff6f626fae3
msgid "``(['\"]?)(\\d+)\\1`` matchs ``\"13\"`` (in double quotes), or ``'4'`` (in single quotes) or ``77`` (without quotes) etc"
msgstr ""

#: ../../regexp_syntax.rst:339
# 10d44507f07642ffad564d91080daaf5
msgid "Modifiers"
msgstr ""

#: ../../regexp_syntax.rst:341
# 0c63b470addc4ff29d3efc2f94fb91d5
msgid "Modifiers are for changing behaviour of ``TRegExpr``."
msgstr ""

#: ../../regexp_syntax.rst:343
# f42fac798a424605a6da99f290cff531
msgid "There are two ways to set up modifiers:"
msgstr ""

#: ../../regexp_syntax.rst:345
# 03e59023c9184d39a7431d9800f66b6a
msgid "1) Embed within the regular expression using the `(?imsxr-imsxr) <#inlinemodifiers>`_."
msgstr ""

#: ../../regexp_syntax.rst:349
# 9abd0acbc64f4ff4b1d750fa74a6b286
msgid "2) Assign to appropriate ``TRegExpr`` property (`Modifier* <tregexpr_interface.html#modifierstr>`__. The default values for new instances of TRegExpr object defined in `global variables <tregexpr_interface.html#global-constants>`_. For example global variable ``RegExprModifierX`` defines default value for ``ModifierX`` property."
msgstr ""

#: ../../regexp_syntax.rst:357
# 4a462047eaf94227b65ffd9f4b2c6899
msgid "i"
msgstr ""

#: ../../regexp_syntax.rst:359
# 336d3504dd62438cbbf9e16a5f2b5f16
msgid "Case-insensitive pattern matching (using installed in you system locale settings), see also `InvertCase <tregexpr_interface.html#invertcase>`__."
msgstr ""

#: ../../regexp_syntax.rst:364
# b1f3e4923431478aa78430ab93a48a1c
msgid "m"
msgstr ""

#: ../../regexp_syntax.rst:366
# ae46910d6aeb417d91171cb96808a329
msgid "Treat string as multiple lines. So ``^`` and ``$`` matches the start or end of any line anywhere within the string."
msgstr ""

#: ../../regexp_syntax.rst:369
# 5aeb46204921485d91b0ddb0dad01dda
msgid "See also `Line separators <tregexpr_interface.html#lineseparators>`_."
msgstr ""

#: ../../regexp_syntax.rst:373
# ea24f3c286df48d58014591089ab9677
msgid "s"
msgstr ""

#: ../../regexp_syntax.rst:375
# 7ff99496b53b4de8bb3f965560c7c840
msgid "Treat string as single line. So ``.`` matches any character whatsoever, even a line separators."
msgstr ""

#: ../../regexp_syntax.rst:378
# 7ff99496b53b4de8bb3f965560c7c840
msgid "See also `Line separators <tregexpr_interface.html#lineseparators>`_, which it normally would not match."
msgstr ""

#: ../../regexp_syntax.rst:383
# 3685b2edadf5463ea8f478cd0263ebcb
msgid "g"
msgstr ""

#: ../../regexp_syntax.rst:385
# a0bd7c1b560a4edd8e320bf7e9a30bf7
msgid "Non standard modifier."
msgstr ""

#: ../../regexp_syntax.rst:387
# b482af902d594489a5d615c34239b1f0
msgid "Switching it ``Off`` you’ll switch all following operators into non-greedy mode. So, if modifier ``/g`` is ``Off`` then ``+`` works as ``+?``, ``*`` as ``*?`` and so on."
msgstr ""

#: ../../regexp_syntax.rst:392
# 1377c54e69dd405b81e388fc341c6045
msgid "By default this modifier is ``On``."
msgstr ""

#: ../../regexp_syntax.rst:395
# 3bb504401df24e5fbe54f7be33071435
msgid "x"
msgstr ""

#: ../../regexp_syntax.rst:397
# 3c377316934041718ac686f39bdf75dc
msgid "Tells the ``TRegExpr`` to ignore whitespace that is neither backslashed nor within a character class. You can use this to break up your regular expression into more readable parts."
msgstr ""

#: ../../regexp_syntax.rst:401
# c5d316b3cc6a4b4abebb54fcf2e6006a
msgid "The ``#`` character is also treated as a metacharacter introducing a comment."
msgstr ""

#: ../../regexp_syntax.rst:412
# 37e93e770a8f4e238ece39fad50a3eae
msgid "This also means that if you want real whitespace or ``#`` characters in the pattern (outside a character class, where they are unaffected by ``/x``), you’ll either have to escape them or encode them using octal or hex escapes."
msgstr ""

#: ../../regexp_syntax.rst:418
# 2aafc1c7b3494a359ea31210613b3a91
msgid "r"
msgstr ""

#: ../../regexp_syntax.rst:420
# a4524cc0e17b4aa5a9a86a3f07529b9c
msgid "Non-standard modifier."
msgstr ""

#: ../../regexp_syntax.rst:422
# d99041e46b0245dfbf138db8515d378b
msgid "If is set then range ``а-я`` includes also ``ё``. And ``А-Я`` includes also ``Ё``. And ``а-Я`` includes all russian symbols."
msgstr ""

#: ../../regexp_syntax.rst:426
# e673894b7b1e4e048b259d2ff1c2e991
msgid "The modifier is set `On` by default."
msgstr ""

#: ../../regexp_syntax.rst:429
# aa64c2f338a04b289fe78d3cfa633298
msgid "Perl extensions"
msgstr ""

#: ../../regexp_syntax.rst:434
# 4522bf02a20d4c0d8109e8e70090609e
msgid "(?imsxr-imsxr)"
msgstr ""

#: ../../regexp_syntax.rst:436
# a9b874f64bfd435892ffbcc7a97df1a0
msgid "You may use it into r.e. for modifying modifiers by the fly. If this construction inlined into subexpression, then it effects only into this subexpression"
msgstr ""

#: ../../regexp_syntax.rst:448
# 53b90f25371d42e8a3ef2f3433b16fd0
msgid "(?#text)"
msgstr ""

#: ../../regexp_syntax.rst:450
# 02ed8d39191842edbf00cc22d3f634e0
msgid "A comment, the text is ignored. Note that TRegExpr closes the comment as soon as it sees a ``)``, so there is no way to put a literal ``)`` in the comment."
msgstr ""

#: ../../regexp_syntax.rst:454
# 92033bf22124478a99083d06a522aca6
msgid "Just now don’t forget to read the `FAQ <faq.html>`_ (expecially ‘non-greediness’ optimization `question <faq.html#nongreedyoptimization>`_)."
msgstr ""

#: ../../regexp_syntax.rst:459
# 96f6048d393f498a9255866a0e9b565e
msgid "Play ground"
msgstr ""

#: ../../regexp_syntax.rst:461
# c990b4abbf904ff9bbae2944ce7f96b8
msgid "You can play with regular expressions using Windows `REStudio <https://github.com/masterandrey/TRegExpr/releases/download/0.952b/REStudio.exe>`_."
msgstr ""

