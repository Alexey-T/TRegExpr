# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Andrey Sorokin
# This file is distributed under the same license as the TRegExpr package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TRegExpr 0.952\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-08 11:59+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../translations_list.rst:6
# 3f5c4b46b8044bd9bb9061c9a90ab0ab
msgid "`Русский <https://regex.masterandrey.com/ru/latest/index.html>`__"
msgstr ""

#: ../../translations_list.rst:7
# 74a1815c08824b93b748a2883668627d
msgid "`Deutsch <https://regex.masterandrey.com/de/latest/index.html>`__"
msgstr ""

#: ../../translations_list.rst:8
# b407bd977a834f6795a9fc68d4a38360
msgid "`Български <https://regex.masterandrey.com/bg/latest/index.html>`__"
msgstr ""

#: ../../translations_list.rst:9
# 03b3613482794060b61394b75c161644
msgid "`Français <https://regex.masterandrey.com/fr/latest/index.html>`__"
msgstr ""

#: ../../translations_list.rst:10
# 3257c3d780c54ed7814b9a582a7fbf59
msgid "`Español <https://regex.masterandrey.com/es/latest/index.html>`__"
msgstr ""

#: ../../tregexpr.rst:4
# f6ada2bfe25f4d65bca5318ec70927a1
msgid "TRegExpr"
msgstr ""

#: ../../tregexpr.rst:6
# c6fc1544642144a78e7659f7eb4e684d
msgid "Implements `regular expressions <regular_expressions.html>`_ in pure pascal. Is compatible with Free Pascal, Delphi 2-7, Borland C++ Builder 3-6."
msgstr ""

#: ../../tregexpr.rst:9
# 2ba3cf26da5c4829b74b58094c4c32bc
msgid "To use it just copy `source code <https://github.com/masterandrey/TRegExpr/blob/master/src/RegExpr.pas>`_ into your project."
msgstr ""

#: ../../tregexpr.rst:12
# 41ec1f45ad7d43a8a3d7425e3466ace5
msgid "The library had already included into `Lazarus (Free Pascal) <http://wiki.freepascal.org/Regexpr>`_ project so you do not need to copy anything if you use `Lazarus <https://www.lazarus-ide.org/>`_."
msgstr ""

#: ../../tregexpr.rst:17
# acbd4d5adc304679ae4e7e54886bbc24
msgid "TRegExpr class"
msgstr ""

#: ../../tregexpr.rst:20
# bb81bff294174f008b1e4a528b969e56
msgid "VersionMajor, VersionMinor"
msgstr ""

#: ../../tregexpr.rst:22
# 669a1f33a9644afb869c1aae34651c47
msgid "Return major and minor version, for example, for ``version 0.944``"
msgstr ""

#: ../../tregexpr.rst:38
# cf3a7bd8bcfd4c08912231dcb137e52d
msgid "VersionMajor = 0\n"
"VersionMinor = 944"
msgstr ""

#: ../../tregexpr.rst:30
# 9efe6569144e4c51b33536759af390f7
msgid "Expression"
msgstr ""

#: ../../tregexpr.rst:32
# 9ca99d5b12804cabafd89f462401fb87
msgid "Regular expression."
msgstr ""

#: ../../tregexpr.rst:34
# 07042b55db6d48399793fc80719d92b1
msgid "For optimization regular expression is automatically compiled into ``P-code``. Human-readable form of the ``P-code`` returns by Dump_."
msgstr ""

#: ../../tregexpr.rst:37
# 86c6be00dc334f83a36000bc211ed5da
msgid "In case of any errors in compilation, ``Error`` method is called (by default ``Error`` raises exception ERegExpr_)"
msgstr ""

#: ../../tregexpr.rst:41
# 5a6605f4dcc34c1a957509d8f8cb49a0
msgid "ModifierStr"
msgstr ""

#: ../../tregexpr.rst:43
# acca0dc4581542b895d7f53d18b3d26d
msgid "Set or get values of `regular expression modifiers <regular_expressions.html#modifiers>`__."
msgstr ""

#: ../../tregexpr.rst:46
# 4cbbc037abff4a33a109405aa0a804e0
msgid "Format of the string is similar as in `(?ismx-ismx) <regular_expressions.html#inlinemodifiers>`__. For example ``ModifierStr := ‘i-x’`` will switch on modifier `/i <regular_expressions.html#i>`_, switch off `/x <regular_expressions.html#x>`_ and leave unchanged others."
msgstr ""

#: ../../tregexpr.rst:51
# c9a8779521dc4a95a352d82d3d001de6
msgid "If you try to set unsupported modifier, ``Error`` will be called."
msgstr ""

#: ../../tregexpr.rst:54
# 07656feb72e64c1bb32eb9d81b882c69
msgid "ModifierI"
msgstr ""

#: ../../tregexpr.rst:56
# 2eefd23deafe4b0fa8e7937ac131fa79
msgid "`Modifier /i, \"case-insensitive\" <regular_expressions.html#i>`, initialized with RegExprModifierI_ value."
msgstr ""

#: ../../tregexpr.rst:60
# 7b0a4fae72a34023b6958073426bfac3
msgid "ModifierR"
msgstr ""

#: ../../tregexpr.rst:62
# 9294c83c7d464fc3999db3e3290a1d89
msgid "`Modifier /r, \"Russian range extension\" <regular_expressions.html#r>`_, initialized with RegExprModifierR_ value."
msgstr ""

#: ../../tregexpr.rst:66
# fa8ce43ebea2464390e5a7cf3832120b
msgid "ModifierS"
msgstr ""

#: ../../tregexpr.rst:68
# 9d03d2b0139745c2a64fce71412650ac
msgid "`Modifier /s, \"single line strings\" <regular_expressions.html#s>`_, initialized with RegExprModifierS_ value."
msgstr ""

#: ../../tregexpr.rst:72
# 49d2d0930e8d408bad1ed86f04fb8418
msgid "ModifierG"
msgstr ""

#: ../../tregexpr.rst:74
# 82a12a65e34b491abc50e4be07c63116
msgid "`Modifier /g, \"greediness\" <regular_expressions.html#g>`_, initialized with RegExprModifierG_ value."
msgstr ""

#: ../../tregexpr.rst:78
# cac30152913c4758b912dc0f8aa9015e
msgid "ModifierM"
msgstr ""

#: ../../tregexpr.rst:80
# 74947754af20491fa77a56730dcfd6af
msgid "`Modifier /m, \"multi-line strings\" <regular_expressions.html#m>`_, initialized with RegExprModifierM_ value."
msgstr ""

#: ../../tregexpr.rst:84
# e9f2c3d86823414ab21d0f7d4ac0943b
msgid "ModifierX"
msgstr ""

#: ../../tregexpr.rst:86
# e4ab3891319d4e128fe142bcaec2db57
msgid "`Modifier /x, \"eXtended syntax\" <regular_expressions.html#x>`_, initialized with RegExprModifierX_ value."
msgstr ""

#: ../../tregexpr.rst:90
# 8a816b489f0745c39a69535b2a4fc115
msgid "Exec"
msgstr ""

#: ../../tregexpr.rst:92
# 93053631b86a477e8970455c4174bff4
msgid "Match the regular expression against ``AInputString``."
msgstr ""

#: ../../tregexpr.rst:94
# 88fda6c106e842999d18ab53cf6965c1
msgid "Available overloaded ``Exec`` version without ``AInputString`` - it uses ``AInputString`` from previous call."
msgstr ""

#: ../../tregexpr.rst:97
# c5716a70cf9a4ce4bd5ec4890c8d30fd
msgid "See also global function ExecRegExpr_ that you can use without explicit ``TRegExpr`` object creation."
msgstr ""

#: ../../tregexpr.rst:101
# 98f603584fcd4c989d76d16c84b287d0
msgid "ExecNext"
msgstr ""

#: ../../tregexpr.rst:103
# 491afedfa5124977bbf311f2feaa9d9a
msgid "Find next match."
msgstr ""

#: ../../tregexpr.rst:105
# 4b08edcc4a494820b35af45ea76a55cb
msgid "Without parameter works the same as"
msgstr ""

#: ../../tregexpr.rst:121
# aaba6a2002174ce48abc49eefcb7b576
msgid "if MatchLen [0] = 0\n"
"  then ExecPos (MatchPos [0] + 1)\n"
"  else ExecPos (MatchPos [0] + MatchLen [0]);"
msgstr ""

#: ../../tregexpr.rst:113
# 446ece5ade984588853382497b09a935
msgid "Raises exception if used without preceeding successful call to Exec_, ExecPos_ or ExecNext_."
msgstr ""

#: ../../tregexpr.rst:116
# 259213a78dbe47b78fe81182e3b3acee
msgid "So you always must use something like"
msgstr ""

#: ../../tregexpr.rst:132
# 0471f94cfb8d478ea2d75ee7462b6cdf
msgid "if Exec (InputString)\n"
"  then\n"
"    repeat\n"
"      { proceed results}\n"
"    until not ExecNext;"
msgstr ""

#: ../../tregexpr.rst:127
# 6008bb3c35734139be6fc7c39b05be1a
msgid "ExecPos"
msgstr ""

#: ../../tregexpr.rst:129
# 526a9a5814ba4b2daa4acae479c793e7
msgid "Finds match for ``InputString`` starting from ``AOffset`` position"
msgstr ""

#: ../../tregexpr.rst:145
# 228f8508ff304847963971361f4b2cd2
msgid "AOffset = 1 // first char of InputString"
msgstr ""

#: ../../tregexpr.rst:136
# b11d067e95a84c589d430f5ef75cccef
msgid "InputString"
msgstr ""

#: ../../tregexpr.rst:138
# e24c18ba00054fcd9189cbd7287a0333
msgid "Returns current input string (from last Exec_ call or last assign to this property)."
msgstr ""

#: ../../tregexpr.rst:141
# c79c65df0443421a8752a72f7c152e8e
msgid "Any assignment to this property clears Match_, MatchPos_ and MatchLen_."
msgstr ""

#: ../../tregexpr.rst:144
# 6337af00e1f64137948b7e888a6a6f1d
msgid "Substitute"
msgstr ""

#: ../../tregexpr.rst:160
# 4a2b9b37c1594f97b3daebee0baead1d
msgid "function Substitute (const ATemplate : RegExprString) : RegExprString;"
msgstr ""

#: ../../tregexpr.rst:150
# e394bfd1c89c4793950d23fc0f1acaf3
msgid "Returns ``ATemplate`` with ``$&`` or ``$0`` replaced by whole regular expression and ``$n`` replaced by occurence of subexpression number ``n``."
msgstr ""

#: ../../tregexpr.rst:153
# 472840eb62304a00ba548020c0ce03b8
msgid "To place into template characters ``$`` or ``\\``, use prefix ``\\``, like ``\\\\`` or ``\\$``."
msgstr ""

#: ../../tregexpr.rst:156
# 63534e92f9834a7d90a7ee143622abb5
msgid "symbol"
msgstr ""

#: ../../tregexpr.rst:156
# d80e1100cda54360abdc6636c280c412
msgid "description"
msgstr ""

#: ../../tregexpr.rst:158
# c529505cc5f642ba9f4418abe81c3a5d
msgid "``$&``"
msgstr ""

#: ../../tregexpr.rst:158
#: ../../tregexpr.rst:159
# f096a473d865448680bf781a0a1b27a1
# 17a1db76015d44be88cddcc9d9eba35e
msgid "whole regular expression match"
msgstr ""

#: ../../tregexpr.rst:159
# f4fa484623154ad688f6084cdff1f5ab
msgid "``$0``"
msgstr ""

#: ../../tregexpr.rst:160
# acc558739ec14eb4a7fd736c44b2559b
msgid "``$n``"
msgstr ""

#: ../../tregexpr.rst:160
# 562ec9c44605476d88da0758bc0d57fd
msgid "regular subexpression ``n`` match"
msgstr ""

#: ../../tregexpr.rst:161
# c916e845bd5c443f82efdb244c7127a3
msgid "``\\n``"
msgstr ""

#: ../../tregexpr.rst:161
# 16b6159b15234a9990386dbc74ba8a9d
msgid "in Windows replaced with ``\\r\\n``"
msgstr ""

#: ../../tregexpr.rst:162
# b641853e1a064839ad25ad3ce1a78962
msgid "``\\l``"
msgstr ""

#: ../../tregexpr.rst:162
# 959ac7183c074be8b35e4100cf827a37
msgid "lowcase one next char"
msgstr ""

#: ../../tregexpr.rst:163
# 4191919287c14e08a84835abc20b88cd
msgid "``\\L``"
msgstr ""

#: ../../tregexpr.rst:163
# c87dd00f4a4a49bbb874e18b33cd7d7b
msgid "lowercase all chars after that"
msgstr ""

#: ../../tregexpr.rst:164
# 07f7e7b7b8e641a4bcf954a079b671ef
msgid "``\\u``"
msgstr ""

#: ../../tregexpr.rst:164
# fb0ca4eda40e452baef2f2a9f5d27647
msgid "uppcase one next char"
msgstr ""

#: ../../tregexpr.rst:165
# 2e15d831287e4751a31bf1b5a0046f4f
msgid "``\\U``"
msgstr ""

#: ../../tregexpr.rst:165
# 04e34a45291649be9dab57f54d6dee4f
msgid "uppercase all chars after that"
msgstr ""

#: ../../tregexpr.rst:182
# 8b9416fac8664ded915ce216cd4dbf3e
msgid "'1\\$ is $2\\\\rub\\\\' -> '1$ is <Match[2]>\\rub\\'\n"
"'\\U$1\\\\r' transforms into '<Match[1] in uppercase>\\r'"
msgstr ""

#: ../../tregexpr.rst:173
# 90871cb19a5e48c2ab3ee073b35a9986
msgid "If you want to place raw digit after ‘$n’ you must delimit ``n`` with curly braces ``{}``."
msgstr ""

#: ../../tregexpr.rst:190
# 2e177d2b54d74932b5fd8bc383a6ccd5
msgid "'a$12bc' -> 'a<Match[12]>bc'\n"
"'a${1}2bc' -> 'a<Match[1]>2bc'."
msgstr ""

#: ../../tregexpr.rst:182
# 2eb81ed8a63448f0ab099b319cf804c3
msgid "Split"
msgstr ""

#: ../../tregexpr.rst:184
# f89a1def92de47ffb43b3476f0c8414c
msgid "Split AInputStr into APieces by r.e. occurencies"
msgstr ""

#: ../../tregexpr.rst:186
#: ../../tregexpr.rst:229
# f379a206d15e4e7a81cad0a490eca4fc
# b3116d72eb17431c84246d3689ff2e36
msgid "Internally calls Exec_ / ExecNext_"
msgstr ""

#: ../../tregexpr.rst:188
# f0031cbeab624426b31706cee4b6eb65
msgid "See also global function SplitRegExpr_ that you can use without explicit ``TRegExpr`` object creation."
msgstr ""

#: ../../tregexpr.rst:194
# 38645dd65f544f0781499cfe7a5b9ff6
msgid "Replace, ReplaceEx"
msgstr ""

#: ../../tregexpr.rst:210
# 17a19dd3f42540fc8cd014812aff66de
msgid "function Replace (Const AInputStr : RegExprString;\n"
"  const AReplaceStr : RegExprString;\n"
"  AUseSubstitution : boolean= False)\n"
" : RegExprString; overload;\n"
"\n"
"function Replace (Const AInputStr : RegExprString;\n"
"  AReplaceFunc : TRegExprReplaceFunction)\n"
" : RegExprString; overload;\n"
"\n"
"function ReplaceEx (Const AInputStr : RegExprString;\n"
"  AReplaceFunc : TRegExprReplaceFunction):\n"
"  RegExprString;"
msgstr ""

#: ../../tregexpr.rst:211
# d6564932039e438c981ee7b2624888af
msgid "Returns the string with r.e. occurencies replaced by the replace string."
msgstr ""

#: ../../tregexpr.rst:213
# 13f5545bf47a41399e753a9835b95b71
msgid "If last argument (``AUseSubstitution``) is true, then ``AReplaceStr`` will be used as template for Substitution methods."
msgstr ""

#: ../../tregexpr.rst:230
# ed3fb4395c2640238a5dd9d77bf735a7
msgid "Expression := '((?i)block|var)\\s*(\\s*\\([^ ]*\\)\\s*)\\s*';\n"
"Replace ('BLOCK( test1)', 'def \"$1\" value \"$2\"', True);"
msgstr ""

#: ../../tregexpr.rst:221
# e8185af4881841498602a279fd958a28
msgid "Returns ``def \"BLOCK\" value \"test1\"``"
msgstr ""

#: ../../tregexpr.rst:237
# fd88317c67c54528a7c39dadb4f44081
msgid "Replace ('BLOCK( test1)', 'def \"$1\" value \"$2\"', False)"
msgstr ""

#: ../../tregexpr.rst:227
# 8d04a89b875e4da080ff7cee940b2836
msgid "Returns ``def \"$1\" value \"$2\"``"
msgstr ""

#: ../../tregexpr.rst:231
# 20f505783ced47869cf3e1c3e384119f
msgid "Overloaded version and ``ReplaceEx`` operate with call-back function, so you can implement really complex functionality."
msgstr ""

#: ../../tregexpr.rst:234
# 467643ebf82040db8ccb8f3d15798769
msgid "See also global function ReplaceRegExpr_ that you can use without explicit ``TRegExpr`` object creation."
msgstr ""

#: ../../tregexpr.rst:238
# 7d60b250e9dd47178bca864ebdffb63f
msgid "SubExprMatchCount"
msgstr ""

#: ../../tregexpr.rst:240
# 28ca90185cbb4bbd831f8ed5fec7d50d
msgid "Number of subexpressions has been found in last Exec_ / ExecNext_ call."
msgstr ""

#: ../../tregexpr.rst:242
# 6fef5c87860b49cb857e65a109c6377d
msgid "If there are no subexpr. but whole expr was found (Exec\\* returned True), then ``SubExprMatchCount=0``, if no subexpressions nor whole r.e. found (Exec_ / ExecNext_ returned false) then ``SubExprMatchCount=-1``."
msgstr ""

#: ../../tregexpr.rst:246
# 44738ac9c8ac48eb8ce744e3b52b78d9
msgid "Note, that some subexpr. may be not found and for such subexpr. ``MathPos=MatchLen=-1`` and ``Match=’’``."
msgstr ""

#: ../../tregexpr.rst:263
# 75a36a73f7344c18826a039ea6fc2ba3
msgid "Expression := '(1)?2(3)?';\n"
"Exec ('123'): SubExprMatchCount=2, Match[0]='123', [1]='1', [2]='3'\n"
"\n"
"Exec ('12'): SubExprMatchCount=1, Match[0]='12', [1]='1'\n"
"\n"
"Exec ('23'): SubExprMatchCount=2, Match[0]='23', [1]='', [2]='3'\n"
"\n"
"Exec ('2'): SubExprMatchCount=0, Match[0]='2'\n"
"\n"
"Exec ('7') - return False: SubExprMatchCount=-1"
msgstr ""

#: ../../tregexpr.rst:264
# f290523619774f3dafcf675885a55ddf
msgid "MatchPos"
msgstr ""

#: ../../tregexpr.rst:266
# 7510e2dcd04c4d24a53e6fd9fc350048
msgid "pos of entrance subexpr. ``#Idx`` into tested in last ``Exec*`` string. First subexpr. have ``Idx=1``, last - ``MatchCount``, whole r.e. have ``Idx=0``."
msgstr ""

#: ../../tregexpr.rst:270
# e8e07a25804c442bb21638a532682e9d
msgid "Returns ``-1`` if in r.e. no such subexpr. or this subexpr. not found in input string."
msgstr ""

#: ../../tregexpr.rst:274
# 414ffc981aea4d7ead37eb16d08ed051
msgid "MatchLen"
msgstr ""

#: ../../tregexpr.rst:276
# c5c3096175d34ee7a85c7cce68e3efaf
msgid "len of entrance subexpr. ``#Idx`` r.e. into tested in last ``Exec*`` string. First subexpr. have ``Idx=1``, last - MatchCount, whole r.e. have ``Idx=0``."
msgstr ""

#: ../../tregexpr.rst:280
# 2b72f0745ed243aba413dd5f0c291813
msgid "Returns -1 if in r.e. no such subexpr. or this subexpr. not found in input string."
msgstr ""

#: ../../tregexpr.rst:284
# 04b54fd291f546dfaeea6b10985b1c41
msgid "Match"
msgstr ""

#: ../../tregexpr.rst:286
# c13ba47476a14ea38e36e42bb0c8ce4c
msgid "Returns ``’’`` if in r.e. no such subexpression or this subexpression was not found in the input string."
msgstr ""

#: ../../tregexpr.rst:290
# c72617dd918d4917b39fe8cb3c9eca06
msgid "LastError"
msgstr ""

#: ../../tregexpr.rst:292
# 0111f9a880a94f1d923cf0ace9d538bf
msgid "Returns ``ID`` of last error, ``0`` if no errors (unusable if ``Error`` method raises exception) and clear internal status into ``0`` (no errors)."
msgstr ""

#: ../../tregexpr.rst:296
# 9ff701b9629048e98f7191697fb08de3
msgid "ErrorMsg"
msgstr ""

#: ../../tregexpr.rst:298
# 1a921f7677d640c59bcc4c5efb041611
msgid "Returns ``Error`` message for error with ``ID = AErrorID``."
msgstr ""

#: ../../tregexpr.rst:301
# 27d825aab15a461d93d9b35a06af51f9
msgid "CompilerErrorPos"
msgstr ""

#: ../../tregexpr.rst:303
# f8e53b92c535460986eb868f171017d4
msgid "Returns pos in r.e. there compiler stopped."
msgstr ""

#: ../../tregexpr.rst:305
# 4ed36e015d7c45eba18d28d55c055969
msgid "Useful for error diagnostics"
msgstr ""

#: ../../tregexpr.rst:308
# 65f1080b133240cda5155821e0ac15ac
msgid "SpaceChars"
msgstr ""

#: ../../tregexpr.rst:310
# 94edc0a75d1a4cf89fd83e84e5b9b7dd
msgid "Contains chars, treated as ``\\s`` (initially filled with RegExprSpaceChars_ global constant)"
msgstr ""

#: ../../tregexpr.rst:314
# 9df6b1a5d2a54684923f7706eba0158e
msgid "WordChars"
msgstr ""

#: ../../tregexpr.rst:316
# 6f624a0be9f04cd7864cd25cd8229fb3
msgid "Contains chars, treated as ``\\w`` (initially filled with RegExprWordChars_ global constant)"
msgstr ""

#: ../../tregexpr.rst:321
# 00ecff7461814119b5bfae15829a8ea9
msgid "LineSeparators"
msgstr ""

#: ../../tregexpr.rst:323
# 9a3500b086c14fb3bff0b7e9124cbda8
msgid "line separators (like ``\\n`` in Unix), initially filled with RegExprLineSeparators_ global constant)"
msgstr ""

#: ../../tregexpr.rst:326
#: ../../tregexpr.rst:336
# a7edfdf52b514b5c85372a67a43e4574
# 5418a04cacc14db18bb228928365a59b
msgid "see also `Line Boundaries <regular_expressions.html#lineseparators>`__"
msgstr ""

#: ../../tregexpr.rst:329
# c2447ccb6c5c4f6583cf828eef1d271a
msgid "LinePairedSeparator"
msgstr ""

#: ../../tregexpr.rst:331
# 32c809ef69fd45aca1465c74cf8d1898
msgid "paired line separator (like ``\\r\\n`` in DOS and Windows)."
msgstr ""

#: ../../tregexpr.rst:333
# 94152e0d07ca4effbb3392f5f3086297
msgid "must contain exactly two chars or no chars at all, initially filled with RegExprLinePairedSeparator global constant)"
msgstr ""

#: ../../tregexpr.rst:338
# 1d32429d578248bbabb36fbf3796ae26
msgid "For example, if you need Unix-style behaviour, assign ``LineSeparators := #$a`` and ``LinePairedSeparator := ''`` (empty string)."
msgstr ""

#: ../../tregexpr.rst:341
# c91bba98a70f4ecf953a851b9ec263c2
msgid "If you want to accept as line separators only ``\\x0D\\x0A`` but not ``\\x0D`` or ``\\x0A`` alone, then assign ``LineSeparators := ''`` (empty string) and ``LinePairedSeparator := #$d#$a``."
msgstr ""

#: ../../tregexpr.rst:345
# b9ffc66d3010475eb17261ef2a30862f
msgid "By default ‘mixed’ mode is used (defined in RegExprLine[Paired]Separator[s] global constants):"
msgstr ""

#: ../../tregexpr.rst:362
# 18e0cf5179cb48139ce11e4eb4fdf785
msgid "LineSeparators := #$d#$a;\n"
"LinePairedSeparator := #$d#$a"
msgstr ""

#: ../../tregexpr.rst:353
# b5e0494343e746f28363d60baf7c9618
msgid "Behaviour of this mode is detailed described in the `Line Boundaries <regular_expressions.html#lineseparators>`__."
msgstr ""

#: ../../tregexpr.rst:357
# dbaaa651e6584c3b9f5f1753749485a1
msgid "InvertCase"
msgstr ""

#: ../../tregexpr.rst:359
# 599955c526de4d3faaf92eeebb20de67
msgid "Invertion of character case. Redefine it if you want different behaviour."
msgstr ""

#: ../../tregexpr.rst:363
# f4de23dca4364a17bd02c74b4b39c065
msgid "Compile"
msgstr ""

#: ../../tregexpr.rst:365
# 5b1d8daf5c7549449bf68084d37016f7
msgid "Compiles regular expression."
msgstr ""

#: ../../tregexpr.rst:367
# 21b6db06715e4e968dab2bc5f4b0c222
msgid "Useful for example for GUI regular expressions editors - to check regular expression without using it."
msgstr ""

#: ../../tregexpr.rst:371
# bde7cc3a16aa4e839b1bda6aaf8cd24b
msgid "Dump"
msgstr ""

#: ../../tregexpr.rst:373
# c3f9971bd23e4e8087a90d90dacd839e
msgid "Show ``P-code`` (compiled regular expression) as human-readable string."
msgstr ""

#: ../../tregexpr.rst:376
# efc20effbcbf4af982cb5ed6691e4168
msgid "Global constants"
msgstr ""

#: ../../tregexpr.rst:379
# f28c5ea31aca4517850c10ad9e2c13e3
msgid "EscChar"
msgstr ""

#: ../../tregexpr.rst:381
# 96989aa0f21a4fa4a27b398a1d8898d4
msgid "Escape-char, by default ``\\``."
msgstr ""

#: ../../tregexpr.rst:384
# 435dfb47319e4e8c915795affc5a3eba
msgid "RegExprModifierI"
msgstr ""

#: ../../tregexpr.rst:386
# 0ae0840b42584944ae260ea86bbda689
msgid "`Modifier i <regular_expressions.html#i>`_ default value"
msgstr ""

#: ../../tregexpr.rst:389
# b9112c1257c14baeabd8aa6d50da2fae
msgid "RegExprModifierR"
msgstr ""

#: ../../tregexpr.rst:391
# 5ad3e34b33ab4a669e969e952738ed25
msgid "`Modifier r <regular_expressions.html#r>`_ default value"
msgstr ""

#: ../../tregexpr.rst:394
# edceb073a4ff40e2831d42cf55b76b60
msgid "RegExprModifierS"
msgstr ""

#: ../../tregexpr.rst:396
# 6e6d620ddbf946b4ac91dd22fe6fe9b2
msgid "`Modifier s <regular_expressions.html#s>`_ default value"
msgstr ""

#: ../../tregexpr.rst:399
# 36aefec81e09426dbe367ddef6140eea
msgid "RegExprModifierG"
msgstr ""

#: ../../tregexpr.rst:401
# 86cfbb87e0c849dcadf9dde1f6c318a9
msgid "`Modifier g <regular_expressions.html#g>`_ default value"
msgstr ""

#: ../../tregexpr.rst:404
# b7623751ad644f0e9139fc50d6a78ea1
msgid "RegExprModifierM"
msgstr ""

#: ../../tregexpr.rst:406
# 35e625762244405f916c0a2bb32e5b3e
msgid "`Modifier m <regular_expressions.html#m>`_ default value"
msgstr ""

#: ../../tregexpr.rst:409
# 378869f67dcc46ae95fb5e1ca3966fee
msgid "RegExprModifierX"
msgstr ""

#: ../../tregexpr.rst:411
# 646c4805e7f04cbead159befd21509bf
msgid "`Modifier x <regular_expressions.html#x>`_ default value"
msgstr ""

#: ../../tregexpr.rst:414
# d7e360b5b14747f8871f1fd639283e4d
msgid "RegExprSpaceChars"
msgstr ""

#: ../../tregexpr.rst:416
# a02b25600d80477ba15359bf9c336cd9
msgid "Default for SpaceChars_ property"
msgstr ""

#: ../../tregexpr.rst:420
# c5e02818ecd24c4fafb77cec23f3c3f7
msgid "RegExprWordChars"
msgstr ""

#: ../../tregexpr.rst:422
# 89933627cd9c4cccbf12e64e68ea774d
msgid "Default value for WordChars_ property"
msgstr ""

#: ../../tregexpr.rst:426
# 543872c3906e4206a21a292120869f38
msgid "RegExprLineSeparators"
msgstr ""

#: ../../tregexpr.rst:428
# e20d11ea0a824812897e01353d855977
msgid "Default value for LineSeparators_ property"
msgstr ""

#: ../../tregexpr.rst:431
# 4211f8ac71034746b6210b1c4baa99ab
msgid "RegExprLinePairedSeparator"
msgstr ""

#: ../../tregexpr.rst:433
# 784f434987b4475eb498ca6cfc9c5637
msgid "Default value for LinePairedSeparator_ property"
msgstr ""

#: ../../tregexpr.rst:437
# 00564f5197634162a9e39cd363dfe48b
msgid "RegExprInvertCaseFunction"
msgstr ""

#: ../../tregexpr.rst:439
# 758ded3f88df455c87aebd5ed7b0cd7d
msgid "Default for InvertCase_ property"
msgstr ""

#: ../../tregexpr.rst:442
# ad95a480547541deb22959e509a50aa1
msgid "Global functions"
msgstr ""

#: ../../tregexpr.rst:444
# 9573df23a7a54531ac8cf2399328deef
msgid "All this functionality is available as methods of ``TRegExpr``, but with global functions you do not need to create ``TReExpr`` instance so your code would be more simple if you just need one function."
msgstr ""

#: ../../tregexpr.rst:449
# 61dbaa14d6da41b0abc14673bdae05eb
msgid "ExecRegExpr"
msgstr ""

#: ../../tregexpr.rst:451
# a3ed1ed81a7e45769b8146f04cf11fff
msgid "true if the string matches the regular expression. Just as Exec_ in ``TRegExpr``."
msgstr ""

#: ../../tregexpr.rst:455
# 6bc0551a202a4935a77a3d7328f326e0
msgid "SplitRegExpr"
msgstr ""

#: ../../tregexpr.rst:457
# 5ad5ae23280b4cda97f07461d731e110
msgid "Splits the string by regular expressions. See also Split_ if you prefer to create ``TRegExpr`` instance explicitly."
msgstr ""

#: ../../tregexpr.rst:461
# b1d5b7e94d16440c836895dd092750e9
msgid "ReplaceRegExpr"
msgstr ""

#: ../../tregexpr.rst:477
# af002aa6162543908fb2813b895e6a6f
msgid "function ReplaceRegExpr (\n"
"    const ARegExpr, AInputStr, AReplaceStr : RegExprString;\n"
"    AUseSubstitution : boolean= False\n"
") : RegExprString; overload;\n"
"\n"
"Type\n"
"  TRegexReplaceOption = (rroModifierI,\n"
"                         rroModifierR,\n"
"                         rroModifierS,\n"
"                         rroModifierG,\n"
"                         rroModifierM,\n"
"                         rroModifierX,\n"
"                         rroUseSubstitution,\n"
"                         rroUseOsLineEnd);\n"
"  TRegexReplaceOptions = Set of TRegexReplaceOption;\n"
"\n"
"function ReplaceRegExpr (\n"
"    const ARegExpr, AInputStr, AReplaceStr : RegExprString;\n"
"    Options :TRegexReplaceOptions\n"
") : RegExprString; overload;"
msgstr ""

#: ../../tregexpr.rst:486
# 9c6d70992b754b3bbbc7a49254175287
msgid "Returns the string with regular expressions replaced by the ``AReplaceStr``. See also Replace_ if you prefer to create TRegExpr instance explicitly."
msgstr ""

#: ../../tregexpr.rst:489
# d4a68a75ab204f8b83af34fff67b6613
msgid "If last argument (``AUseSubstitution``) is true, then ``AReplaceStr`` will be used as template for ``Substitution methods``:"
msgstr ""

#: ../../tregexpr.rst:506
# 9f4ff278cd904c4a9d91efe6601682e1
msgid "ReplaceRegExpr (\n"
"  '((?i)block|var)\\s*(\\s*\\([^ ]*\\)\\s*)\\s*',\n"
"  'BLOCK(test1)',\n"
"  'def \"$1\" value \"$2\"',\n"
"  True\n"
")"
msgstr ""

#: ../../tregexpr.rst:501
# 510fc70071a2433a82b553c1635205b0
msgid "Returns  ``def 'BLOCK' value 'test1'``"
msgstr ""

#: ../../tregexpr.rst:503
# 01c164ea8d6c436e9e098ea0861a7ff8
msgid "But this one (note there is no last argument):"
msgstr ""

#: ../../tregexpr.rst:519
# 92e29bdd96f945819ff25f52778eb37d
msgid "ReplaceRegExpr (\n"
"  '((?i)block|var)\\s*(\\s*\\([^ ]*\\)\\s*)\\s*',\n"
"  'BLOCK(test1)',\n"
"  'def \"$1\" value \"$2\"'\n"
")"
msgstr ""

#: ../../tregexpr.rst:513
# 9a36f76aed2547529aa1f13e347bbad7
msgid "Returns ``def \"$1\" value \"$2\"``"
msgstr ""

#: ../../tregexpr.rst:516
# 1439b264fec74ae2ad9ea11a708e39a0
msgid "Version with options"
msgstr ""

#: ../../tregexpr.rst:518
# 59a896bcd29b4fe7a64e8a7fe3a3965c
msgid "With ``Options`` you control ``\\n`` behaviour (if ``rroUseOsLineEnd`` then ``\\n`` is replaced with ``\\n\\r`` in Windows and ``\\n`` in Linux). And so on."
msgstr ""

#: ../../tregexpr.rst:521
# 1702c97357584e5db57510b1e9b92bdb
msgid "Type\n"
"  TRegexReplaceOption = (rroModifierI,\n"
"                         rroModifierR,\n"
"                         rroModifierS,\n"
"                         rroModifierG,\n"
"                         rroModifierM,\n"
"                         rroModifierX,\n"
"                         rroUseSubstitution,\n"
"                         rroUseOsLineEnd);"
msgstr ""

#: ../../tregexpr.rst:534
# e747a44e799d4feaaf94048c08314432
msgid "QuoteRegExprMetaChars"
msgstr ""

#: ../../tregexpr.rst:536
# 8c2ca91909c74d17addb1eb016706043
msgid "Replace all metachars with its safe representation, for example ``abc'cd.(`` converts into ``abc\\'cd\\.\\(``"
msgstr ""

#: ../../tregexpr.rst:539
# cebe4757d37b45c79e067109c4921ceb
msgid "This function usefull for r.e. autogeneration from user input"
msgstr ""

#: ../../tregexpr.rst:542
# 2bdfadf38db04a459f7419a83eeb3458
msgid "RegExprSubExpressions"
msgstr ""

#: ../../tregexpr.rst:544
# 083c4faf9d8a405e8088cf559ee18449
msgid "Makes list of subexpressions found in ``ARegExpr``"
msgstr ""

#: ../../tregexpr.rst:546
# c726c27d99884b64a5604d85f48f17e3
msgid "In ``ASubExps`` every item represent subexpression, from first to last, in format:"
msgstr ""

#: ../../tregexpr.rst:549
# b3a29f76341745d7ac5055477c2da842
msgid "String - subexpression text (without ‘()’)"
msgstr ""

#: ../../tregexpr.rst:551
# a34d0dfac79a414ea3e59fa4d03a8225
msgid "low word of Object - starting position in ARegExpr, including ‘(’ if exists! (first position is 1)"
msgstr ""

#: ../../tregexpr.rst:554
# 0aa6146caff74cf6aab90b4cf1b41d8f
msgid "high word of Object - length, including starting ‘(’ and ending ‘)’ if exist!"
msgstr ""

#: ../../tregexpr.rst:557
# bc3f379edd864391b8a3f5bd07d3458f
msgid "``AExtendedSyntax`` - must be ``True`` if modifier ``/x`` will be ``On`` while using the r.e."
msgstr ""

#: ../../tregexpr.rst:560
# 68fad3f1f5eb44f39c0bb576bb897160
msgid "Usefull for GUI editors of r.e. etc (you can find example of using in `REStudioMain.pas <https://github.com/masterandrey/TRegExpr/blob/74ab342b639fc51941a4eea9c7aa53dcdf783592/restudio/REStudioMain.pas#L474>`_)"
msgstr ""

#: ../../tregexpr.rst:564
# a02ee22a78564e36b1198a8d2c12af6e
msgid "Result code"
msgstr ""

#: ../../tregexpr.rst:564
# 7703cb5190574750b293c36de93346d4
msgid "Meaning"
msgstr ""

#: ../../tregexpr.rst:566
# 893b2fb7e289469cb5d507a899c3e007
msgid "0"
msgstr ""

#: ../../tregexpr.rst:566
# 714be4f186e24dc8ba5743f60455aeb9
msgid "Success. No unbalanced brackets was found"
msgstr ""

#: ../../tregexpr.rst:567
# 9d210255fa6b4605aea7acd36d5453d4
msgid "-1"
msgstr ""

#: ../../tregexpr.rst:567
# 0965fc8ef9b94c5abb4d4ec6b7939dc0
msgid "there are not enough closing brackets ``)``"
msgstr ""

#: ../../tregexpr.rst:568
# f90d5709ab734df2a2a983b055144d1f
msgid "-(n+1)"
msgstr ""

#: ../../tregexpr.rst:568
# c4aa173ab51b4ad98ffe47774ec61918
msgid "at position n was found opening ``[`` without corresponding closing ``]``"
msgstr ""

#: ../../tregexpr.rst:569
# d4d93d80a3b8488783f9444918cfca97
msgid "n"
msgstr ""

#: ../../tregexpr.rst:569
# 641804a74f5a480fb4804d0db0fdb294
msgid "at position n was found closing bracket ``)`` without corresponding opening ``(``"
msgstr ""

#: ../../tregexpr.rst:572
# 12383808554e43c1a157c2d6a747e9a5
msgid "If ``Result <> 0``, then ``ASubExprs`` can contain empty items or illegal ones"
msgstr ""

#: ../../tregexpr.rst:575
# 4822de27e31841ae9c48e0748d771be3
msgid "ERegExpr"
msgstr ""

#: ../../tregexpr.rst:591
# 1abb93e2c8bb4256b08e581b1cb2bb66
msgid "ERegExpr = class (Exception)\n"
"  public\n"
"   ErrorCode : integer; // error code. Compilation error codes are before 1000\n"
"   CompilerErrorPos : integer; // Position in r.e. where compilation error occured\n"
" end;"
msgstr ""

#: ../../tregexpr.rst:586
# 1692bd97a4634df4a54adc7162019d48
msgid "Unicode"
msgstr ""

#: ../../tregexpr.rst:588
# 4fc194ba927d4167b60f913bd76127f5
msgid "UniCode slows down performance so use it only if you really need Unicode support."
msgstr ""

#: ../../tregexpr.rst:591
# 166c66cd203f415fa9b93fd2d0e380a2
msgid "To use Unicode uncomment ``{$DEFINE UniCode}`` in `regexpr.pas <https://github.com/masterandrey/TRegExpr/blob/29ec3367f8309ba2ecde7d68d5f14a514de94511/src/RegExpr.pas#L86>`__ (remove ``off``)."
msgstr ""

#: ../../tregexpr.rst:596
# 2031f821f06d4234809f7596e9f62b9d
msgid "After that all strings will be treated as WideString."
msgstr ""

