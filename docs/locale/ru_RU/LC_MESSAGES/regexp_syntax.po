# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Andrey Sorokin
# This file is distributed under the same license as the TRegExpr package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Andrey Sorokin <filbert@yandex.ru>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TRegExpr 0.952\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-27 20:26+0300\n"
"PO-Revision-Date: 2019-04-27 17:26+0000\n"
"Last-Translator: Andrey Sorokin <filbert@yandex.ru>, 2019\n"
"Language-Team: Russian (Russia) (https://www.transifex.com/masterAndrey/teams/98461/ru_RU/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru_RU\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

# 4e5929435d734b0bbd0a5e2e0dfcbdf3
#: ../../regexp_syntax.rst:2
msgid "Important note"
msgstr "Важная заметка"

# f70fa158f8f64a0fbe20821418e453f8
#: ../../regexp_syntax.rst:4
msgid ""
"Below is the description of regular expressions implemented in freeware "
"library `TRegExpr <http://regexpstudio.com>`__. The library was widely used "
"in many free and commertial software products."
msgstr ""
"Ниже приведено описание регулярных выражений, реализованных в бесплатной "
"библиотеке `TRegExpr <http://regexpstudio.com> `__. Библиотека широко "
"использовалась во многих бесплатных и коммерческих программных продуктах."

# f59a7e2d99ed41ae82b74577fa88af4c
#: ../../regexp_syntax.rst:9
msgid "Introduction"
msgstr "Вступление"

# e191b913c401454488eb03cc6430f60d
#: ../../regexp_syntax.rst:11
msgid ""
"Regular Expressions are a widely-used method of specifying patterns of text "
"to search for. Special metacharacters allow You to specify, for instance, "
"that a particular string You are looking for occurs at the beginning or end "
"of a line, or contains n recurrences of a certain character."
msgstr ""
"Регулярные выражения - это широко используемый метод определения шаблонов "
"текста для поиска. Специальные метасимволы позволяют вам указать, например, "
"что конкретная искомая строка встречается в начале или конце строки или "
"содержит n повторений определенного символа."

# fb98a7524b9f41eeab892bd8344e627b
#: ../../regexp_syntax.rst:17
msgid ""
"Regular expressions look ugly for novices, but really they are very simple "
"(well, usually simple ;) ), handly and powerfull tool."
msgstr ""
"Регулярные выражения выглядят уродливо для новичков, но на самом деле они "
"очень простые (ну, обычно простые;)), удобный и мощный инструмент."

# c990b4abbf904ff9bbae2944ce7f96b8
#: ../../regexp_syntax.rst:20
msgid ""
"I recommend You to play with regular expressions using Windows `REStudio "
"<https://github.com/masterandrey/TRegExpr/releases/download/0.952b/REStudio.exe>`__"
" - it’ll help You to uderstand main conceptions. Moreover, there are many "
"predefined examples with comments included into repository of R.e. visual "
"debugger."
msgstr ""
"Я рекомендую вам играть с регулярными выражениями с помощью Windows "
"`REStudio "
"<https://github.com/masterandrey/TRegExpr/releases/download/0.952b/REStudio.exe>"
" `__ - это поможет вам понять основные концепции. Более того, существует "
"множество предопределенных примеров с комментариями, включенными в "
"репозиторий визуального отладчика Re."

# 252b8a6700654de29747aa19cd60e2a6
#: ../../regexp_syntax.rst:26
msgid "Let’s start our learning trip!"
msgstr "Давайте начнем нашу учебную поездку!"

# 4ea6c0e1bfa2455794c9fcea646235e6
#: ../../regexp_syntax.rst:29
msgid "Simple matches"
msgstr "Простые совпадения"

# c5d316b3cc6a4b4abebb54fcf2e6006a
#: ../../regexp_syntax.rst:31
msgid ""
"Any single character matches itself, unless it is a metacharacter with a "
"special meaning described below."
msgstr ""
"Любой отдельный символ соответствует самому себе, если только он не является"
" метасимволом со специальным значением, описанным ниже."

# 7a42dd79705641f0b9765b1b3d3f3f12
#: ../../regexp_syntax.rst:34
msgid ""
"A series of characters matches that series of characters in the target "
"string, so the pattern ``bluh`` would match ``bluh`` in the target string. "
"Quite simple, eh ?"
msgstr ""
"Серия символов соответствует этой серии символов в целевой строке, поэтому "
"шаблон `` bluh`` будет соответствовать `` bluh`` в целевой строке. Довольно "
"просто, а?"

# f93880dfbfc5450d96eca74a70d59bc1
#: ../../regexp_syntax.rst:38
msgid ""
"You can cause characters that normally function as metacharacters or escape "
"sequences to be interpreted literally by ‘escaping’ them by preceding them "
"with a backslash ``\\``, for instance: metacharacter ``^`` match beginning "
"of string, but ``\\^`` match character ``^``, ``\\\\`` match ``\\`` and so "
"on."
msgstr ""
"Вы можете заставить символы, которые обычно функционируют как метасимволы "
"или escape-последовательности, интерпретировать буквально, «экранируя» их, "
"поставив перед ними обратную косую черту `` \\ ``, например: метасимвол `` ^"
" `` соответствует началу строки, но `` \\ ^ `` соответствует символу `` ^ "
"``, `` \\\\ `` соответствует `` \\ `` и так далее."

# 315f24cf90ef413e9f9c28c3bd2a9d09
# ddde720794ee4dc9a70d558b0c89b02e
# 453e611690e64701b95cfecabd23e660
# 43254f60ac264bd980998c3b1c8c19d2
# c5a529bb746b47828265927b2bc307dd
# aa1e6c2ed53640ae99ee7d606bcb73d2
# 5299948d8e75419fab9aaac2d9bb653a
# f7341e71a6e4418c9659747f22427c94
# 6adf892d82a0473697b4dd8d2f55b935
# c30869e3fa2743e7a46f42efbc5ae347
# 80a859c2d50047298fed7f7c84f5346c
#: ../../regexp_syntax.rst:45 ../../regexp_syntax.rst:82
#: ../../regexp_syntax.rst:101 ../../regexp_syntax.rst:118
#: ../../regexp_syntax.rst:151 ../../regexp_syntax.rst:231
#: ../../regexp_syntax.rst:293 ../../regexp_syntax.rst:342
#: ../../regexp_syntax.rst:367 ../../regexp_syntax.rst:383
#: ../../regexp_syntax.rst:488
msgid "Examples:"
msgstr "Примеры:"

# 0cab32ead0d64b65ab97ee0b9bdfc83d
#: ../../regexp_syntax.rst:53
msgid "Note for C++ Builder users"
msgstr "Примечание для пользователей C ++ Builder"

# 72675db9a7d648b090bd9a65bc03a504
#: ../../regexp_syntax.rst:55
msgid ""
"Please, read in FAQ answer on question `Why many r.e. work wrong in Borland "
"C++ Builder? <faq.html#cppbescchar>`__"
msgstr ""
"Пожалуйста, прочитайте в FAQ ответ на вопрос «Почему многие не работают в "
"Borland C ++ Builder? <faq.html#cppbescchar> `__"

# 55e370c749bb49cf9832463f0cee7887
#: ../../regexp_syntax.rst:59
msgid "Escape sequences"
msgstr "Escape-последовательности"

# 9241a32e8c4f4aee871edb912e0955f0
#: ../../regexp_syntax.rst:61
msgid ""
"Characters may be specified using a escape sequences syntax much like that "
"used in C and Perl: ``\\n`` matches a newline, ``\\t`` a tab, etc. More "
"generally, ``\\xnn``, where nn is a string of hexadecimal digits, matches "
"the character whose ASCII value is nn. If You need wide (Unicode) character "
"code, You can use ``\\x{nnnn}``, where ``nnnn`` - one or more hexadecimal "
"digits."
msgstr ""
"Символы могут быть указаны с использованием синтаксиса escape-"
"последовательностей, очень похожего на тот, который используется в C и Perl:"
" `` \\ n`` соответствует переводу строки, `` \\ t`` табуляции и т. Д. В "
"более общем смысле, `` \\ xnn``, где nn - это строка шестнадцатеричных цифр,"
" соответствует символу, значение ASCII которого равно nn. Если вам нужен "
"широкий (Unicode) код символа, вы можете использовать `` \\ x {nnnn} ``, где"
" `` nnnn`` - одну или несколько шестнадцатеричных цифр."

# 3e32eb6ac6144c4d80b075e8ad5e44fd
#: ../../regexp_syntax.rst:90
msgid "Character classes"
msgstr "Классы персонажей"

# 99c4b0cfb5f9447a93c55e281d2426ed
#: ../../regexp_syntax.rst:92
msgid ""
"You can specify a character class, by enclosing a list of characters in "
"``[]``, which will match any one character from the list."
msgstr ""
"Вы можете указать класс символов, заключив список символов в `` [] ``, "
"который будет соответствовать любому одному символу из списка."

# a39f8e8ec20d4a9cad93f2828b7a7a8f
#: ../../regexp_syntax.rst:95
msgid ""
"If the first character after the ``[`` is ``^``, the class matches any "
"character not in the list."
msgstr ""
"Если первый символ после `` [`` является `` ^ ``, класс соответствует любому"
" символу, отсутствующему в списке."

# 55e948458d154686bc68edd9693db16e
#: ../../regexp_syntax.rst:108
msgid ""
"Within a list, the ``-`` character is used to specify a range, so that a-z "
"represents all characters between ``a`` and ``z``, inclusive."
msgstr ""
"Внутри списка символ `` -`` используется для указания диапазона, так что az "
"представляет все символы между `` a`` и `` z`` включительно."

# 60942a70eff042b1b4b607b0df0d70d2
#: ../../regexp_syntax.rst:111
msgid ""
"If You want ``-`` itself to be a member of a class, put it at the start or "
"end of the list, or escape it with a backslash. If You want ``]`` you may "
"place it at the start of list or escape it with a backslash."
msgstr ""
"Если вы хотите, чтобы `` -`` сам был членом класса, поместите его в начало "
"или конец списка или экранируйте его обратной косой чертой. Если вы хотите "
"``] ``, вы можете поместить его в начало списка или экранировать его "
"обратной косой чертой."

# a07329be340945ea8edd4cd5d258b969
#: ../../regexp_syntax.rst:131
msgid "Metacharacters"
msgstr "метасимволов"

# c95fa60048ed4d64a00309f5404470c4
#: ../../regexp_syntax.rst:133
msgid ""
"Metacharacters are special characters which are the essence of Regular "
"Expressions. There are different types of metacharacters, described below."
msgstr ""
"Метасимволы - это специальные символы, которые являются сущностью регулярных"
" выражений. Существуют различные типы метасимволов, описанных ниже."

# 213b04c3d85244cab2561440188fd166
#: ../../regexp_syntax.rst:160
msgid ""
"The ``^`` metacharacter by default is only guaranteed to match at the "
"beginning of the input string/text, the ``$`` metacharacter only at the end."
" Embedded line separators will not be matched by ``^`` or ``$``."
msgstr ""
"Метасимвол `` ^ `` по умолчанию гарантированно совпадает только в начале "
"входной строки / текста, метасимвол `` $ `` только в конце. Встроенные "
"разделители строк не будут соответствовать `` ^ `` или `` $ ``."

# ed87bfa235224adf9fa9830b2477711f
#: ../../regexp_syntax.rst:164
msgid ""
"You may, however, wish to treat a string as a multi-line buffer, such that "
"the ``^`` will match after any line separator within the string, and ``$`` "
"will match before any line separator. You can do this by switching On the "
"`modifier /m <regexp_syntax.html#modifier_m>`__."
msgstr ""
"Однако вы можете захотеть рассматривать строку как многострочный буфер, так "
"что `` ^ `` будет соответствовать после любого разделителя строк в строке, а"
" `` $ `` будет совпадать перед любым разделителем строк. Вы можете сделать "
"это, включив модификатор `/ m <regexp_syntax.html#modifier_m> `__."

# fa6af706326b4f4ebdb8921bd79369cd
#: ../../regexp_syntax.rst:169
msgid ""
"The ``\\A`` and ``\\Z`` are just like ``^`` and ``$``, except that they "
"won’t match multiple times when the `modifier /m "
"<regexp_syntax.html#modifier_m>`__ is used, while ``^`` and ``$`` will match"
" at every internal line separator."
msgstr ""
"`` \\ A`` и `` \\ Z`` похожи на `` ^ `` и `` $ ``, за исключением того, что "
"они не будут совпадать несколько раз, когда `modifier / m "
"<regexp_syntax.html#modifier_m> `__ используется, в то время как` `^` `и` "
"`$` `будут совпадать в каждом внутреннем разделителе строк."

# 870ba883c46d4caa8479873e139518bc
#: ../../regexp_syntax.rst:174
msgid ""
"The ``.`` metacharacter by default matches any character, but if You switch "
"Off the `modifier /s <regexp_syntax.html#modifier_s>`__, then ``.`` won’t "
"match embedded line separators."
msgstr ""
"Метасимвол `` .`` по умолчанию соответствует любому символу, но если Вы "
"выключите модификатор `s <regexp_syntax.html#modifier_s> `__, тогда` `.`` не"
" будет соответствовать встроенным разделителям строк."

# 24b7172cc99045a68054dfd2623da3fc
#: ../../regexp_syntax.rst:178
msgid ""
"TRegExpr works with line separators as recommended at `www.unicode.org "
"<http://www.unicode.org/unicode/reports/tr18/>`__:"
msgstr ""
"TRegExpr работает с разделителями строк, как рекомендовано на сайте "
"www.unicode.org. <http://www.unicode.org/unicode/reports/tr18/> `__:"

# 3bd8d69e73764aed8af762c1866a0514
#: ../../regexp_syntax.rst:181
msgid ""
"``^`` is at the beginning of a input string, and, if `modifier /m "
"<regexp_syntax.html#modifier_m>`__ is On, also immediately following any "
"occurrence of ``\\x0D\\x0A`` or ``\\x0A`` or ``\\x0D`` (if You are using "
"`Unicode version <tregexpr_interface.html#unicode>`__ of TRegExpr, then also"
" ``\\x2028`` or  ``\\x2029`` or ``\\x0B`` or ``\\x0C`` or ``\\x85``). Note "
"that there is no empty line within the sequence ``\\x0D\\x0A``."
msgstr ""
"`` ^ `` находится в начале входной строки, и, если `модификатор / m "
"<regexp_syntax.html#modifier_m> `__ включен, также сразу же после любого "
"появления` `\\ x0D \\ x0A`` или` `\\ x0A`` или` `\\ x0D`` (если вы "
"используете` версию Unicode <tregexpr_interface.html#unicode> `__ TRegExpr, "
"затем также` `\\ x2028`` или` `\\ x2029`` или` `\\ x0B`` или` `\\ x0C`` или`"
" `\\ x85``). Обратите внимание, что в последовательности `` \\ x0D \\ x0A`` "
"нет пустой строки."

# 2789416bbbad462186fbef55328265d1
#: ../../regexp_syntax.rst:188
msgid ""
"``$`` is at the end of a input string, and, if `modifier /m "
"<regexp_syntax.html#modifier_m>`__ is On, also immediately preceding any "
"occurrence of  ``\\x0D\\x0A`` or ``\\x0A`` or ``\\x0D`` (if You are using "
"`Unicode version <tregexpr_interface.html#unicode>`__ of TRegExpr, then also"
" ``\\x2028`` or  ``\\x2029`` or ``\\x0B`` or ``\\x0C`` or ``\\x85``). Note "
"that there is no empty line within the sequence ``\\x0D\\x0A``."
msgstr ""
"`` $ `` находится в конце входной строки, и, если `модификатор / m "
"<regexp_syntax.html#modifier_m> `__ включен, также непосредственно "
"предшествует любому появлению` `\\ x0D \\ x0A`` или` `\\ x0A`` или` `\\ "
"x0D`` (если вы используете` версию Unicode <tregexpr_interface.html#unicode>"
" `__ TRegExpr, затем также` `\\ x2028`` или` `\\ x2029`` или` `\\ x0B`` или`"
" `\\ x0C`` или` `\\ x85``). Обратите внимание, что в последовательности `` "
"\\ x0D \\ x0A`` нет пустой строки."

# ede57b818ab74d3e967cda0c170d5a32
#: ../../regexp_syntax.rst:196
msgid ""
"``.`` matchs any character, but if You switch Off `modifier /s "
"<regexp_syntax.html#modifier_s>`__ then ``.`` doesn’t match ``\\x0D\\x0A`` "
"and ``\\x0A`` and ``\\x0D`` (if You are using `Unicode version "
"<tregexpr_interface.html#unicode>`__ of TRegExpr, then also ``\\x2028`` and"
"  ``\\x2029`` and ``\\x0B`` and ``\\x0C`` and ``\\x85``)."
msgstr ""
"`` .`` соответствует любому символу, но если вы выключите `модификатор / s "
"<regexp_syntax.html#modifier_s> `__ then` `.`` не совпадает с` `\\ x0D \\ "
"x0A`` и` `\\ x0A`` и` `\\ x0D`` (если вы используете` версию Unicode "
"<tregexpr_interface.html#unicode> `__ TRegExpr, затем также` `\\ x2028`` и` "
"`\\ x2029`` и` `\\ x0B`` и` `\\ x0C`` и` `\\ x85``)."

# f81e8471526e433dac99ecba23596cec
#: ../../regexp_syntax.rst:202
msgid ""
"Note that ``^.*$`` (an empty line pattern) doesnot match the empty string "
"within the sequence ``\\x0D\\x0A``, but matchs the empty string within the "
"sequence ``\\x0A\\x0D``."
msgstr ""
"Обратите внимание, что `` ^. * $ `` (Шаблон пустой строки) не соответствует "
"пустой строке в последовательности `` \\ x0D \\ x0A``, но соответствует "
"пустой строке в последовательности `` \\ x0A \\ x0D``."

# 34f4cb335eb246e78555c6de9e183ea5
#: ../../regexp_syntax.rst:206
msgid ""
"Multiline processing can be easely tuned for Your own purpose with help of "
"TRegExpr properties `LineSeparators "
"<tregexpr_interface.html#lineseparators>`__ and `LinePairedSeparator "
"<tregexpr_interface.html#linepairedseparator>`__, You can use only Unix "
"style separators ``\\n`` or only DOS/Windows style ``\\r\\n`` or mix them "
"together (as described above and used by default) or define Your own line "
"separators!"
msgstr ""
"Многострочная обработка может быть легко настроена для ваших собственных "
"целей с помощью свойств TRegExpr `LineSeparators "
"<tregexpr_interface.html#lineseparators> `__ и` LinePairedSeparator "
"<tregexpr_interface.html#linepairedseparator> `__, Вы можете использовать "
"только разделители стиля Unix` `\\ n`` или только стиль` `DOS / Windows` `\\"
" r \\ n`` или смешивать их вместе (как описано выше и используется по "
"умолчанию) или определять свои собственные разделители строк!"

# bca0e713201a45c991139a31d2b216da
#: ../../regexp_syntax.rst:215
msgid "Metacharacters - predefined classes"
msgstr "Метасимволы - предопределенные классы"

# 44495071157f415bbf138800e2a5beb0
#: ../../regexp_syntax.rst:226
msgid "You may use ``\\w``, ``\\d`` and ``\\s`` within custom character classes."
msgstr ""
"Вы можете использовать `` \\ w``, `` \\ d`` и `` \\ s`` в пользовательских "
"классах символов."

# 6bea053f0752406687c4726fa59f70fb
#: ../../regexp_syntax.rst:238
msgid ""
"TRegExpr uses properties `SpaceChars "
"<tregexpr_interface.html#tregexpr.spacechars>`__ and `WordChars "
"<tregexpr_interface.html#tregexpr.wordchars>`__ to define character classes "
"``\\w``, ``\\W``, ``\\s``, ``\\S``, so You can easely redefine it."
msgstr ""
"TRegExpr использует свойства `SpaceChars "
"<tregexpr_interface.html#tregexpr.spacechars> `__ и` WordChars "
"<tregexpr_interface.html#tregexpr.wordchars> `__ для определения классов "
"символов` `\\ w``,` `\\ W``,` `\\ s``,` `\\ S``, так что вы можете легко "
"переопределить его."

# 81e3066e722f4adfb9bb68c941260b11
#: ../../regexp_syntax.rst:245
msgid "Metacharacters - word boundaries"
msgstr "Метасимволы - границы слов"

# d74e1b5ab0794b27875247d4588aed0b
#: ../../regexp_syntax.rst:252
msgid ""
"A word boundary (``\\b``) is a spot between two characters that has a "
"``\\w`` on one side of it and a ``\\W`` on the other side of it (in either "
"order), counting the imaginary characters off the beginning and end of the "
"string as matching a ``\\W``."
msgstr ""
"Граница слова (`` \\ b``) - это точка между двумя символами, на одной "
"стороне которой находится `` \\ w`` и на другой стороне `` \\ W`` (в любом "
"порядке) , считая воображаемые символы в начале и конце строки как "
"соответствующие `` \\ W``."

# 7fe5ead7b1c5449f95adcd7e972c5af6
#: ../../regexp_syntax.rst:258
msgid "Metacharacters - iterators"
msgstr "Метасимволы - итераторы"

# 04acda6d45cc4d9fb1bcd696cae8e926
#: ../../regexp_syntax.rst:260
msgid ""
"Any item of a regular expression may be followed by another type of "
"metacharacters - iterators. Using this metacharacters You can specify number"
" of occurences of previous character, metacharacter or subexpression."
msgstr ""
"За любым элементом регулярного выражения могут следовать метасимволы другого"
" типа - итераторы. Используя эти метасимволы Вы можете указать количество "
"вхождений предыдущего символа, метасимвола или подвыражения."

# 8d5a003f7b7240d6b01621a810bfb030
#: ../../regexp_syntax.rst:280
msgid ""
"So, digits in curly brackets of the form ``{n,m}``, specify the minimum "
"number of times to match the item n and the maximum ``m``. The form ``{n}`` "
"is equivalent to ``{n,n}`` and matches exactly ``n`` times. The form "
"``{n,}`` matches ``n`` or more times. There is no limit to the size of ``n``"
" or ``m``, but large numbers will chew up more memory and slow down r.e. "
"execution."
msgstr ""
"Итак, цифры в фигурных скобках вида `` {n, m} ``, задают минимальное "
"количество раз, которое соответствует элементу n, и максимальное `` m``. "
"Форма `` {n} `` эквивалентна `` {n, n} `` и соответствует ровно `` n`` "
"разам. Форма `` {n,} `` соответствует `` n`` или более раз. Не существует "
"ограничений на размер `` n`` или `` m``, но большие числа будут затрачивать "
"больше памяти и замедлять повторное выполнение."

# 13f1f9fee226460bbcdc883a5737304a
#: ../../regexp_syntax.rst:287
msgid ""
"If a curly bracket occurs in any other context, it is treated as a regular "
"character."
msgstr ""
"Если фигурная скобка встречается в любом другом контексте, она "
"рассматривается как обычный символ."

# 3aa74bd3a1224b1cbbd9405d32430854
#: ../../regexp_syntax.rst:304
msgid ""
"A little explanation about “greediness”. “Greedy” takes as many as possible,"
" “non-greedy” takes as few as possible. For example, ``b+`` and ``b*`` "
"applied to string ``abbbbc`` return ``bbbb``, ``b+?`` returns ``b``, ``b*?``"
" returns empty string, ``b{2,3}?`` returns ``bb``, ``b{2,3}`` returns "
"``bbb``."
msgstr ""
"Небольшое объяснение «жадности». «Жадный» берет как можно больше, «не "
"жадный» - как можно меньше. Например, `` b + `` и `` b * `` применяются к "
"строке `` abbbbc`` return `` bbbb``, `` b +? `` Возвращает `` b``, `` b *? "
"`` возвращает пустую строку, `` b {2,3}? `` возвращает `` bb``, `` b {2,3} "
"`` возвращает `` bbb``."

# b66beb64fd70451399aefc3097936d11
#: ../../regexp_syntax.rst:310
msgid ""
"You can switch all iterators into “non-greedy” mode (see the `modifier /g "
"<regexp_syntax.html#modifier_g>`__)."
msgstr ""
"Вы можете переключить все итераторы в «не жадный» режим (см. «Modifier / "
"g»). <regexp_syntax.html#modifier_g> `__)."

# d93b2586f3864904850c6176b1cf66df
#: ../../regexp_syntax.rst:314
msgid "Metacharacters - alternatives"
msgstr "Метасимволы - альтернативы"

# 4ab43a2c82ca4645bba942b595d4fe7b
#: ../../regexp_syntax.rst:316
msgid ""
"You can specify a series of alternatives for a pattern using ``|`` to "
"separate them, so that fee|fie|foe will match any of ``fee``, ``fie``, or "
"``foe`` in the target string (as would ``f(e|i|o)e``). The first alternative"
" includes everything from the last pattern delimiter (``(``, ``[``, or the "
"beginning of the pattern) up to the first ``|``, and the last alternative "
"contains everything from the last ``|`` to the next pattern delimiter. For "
"this reason, it’s common practice to include alternatives in parentheses, to"
" minimize confusion about where they start and end."
msgstr ""
"Вы можете указать ряд альтернатив для шаблона, используя `` | `` для их "
"разделения, так что fee | fie | foe будет соответствовать любому из `` "
"fee``, `` fie`` или `` foe`` в целевая строка (как бы `` f (e | i | o) e``)."
" Первая альтернатива включает в себя все от последнего разделителя шаблона "
"(`` (``, `` [`` или начало шаблона) до первого `` | ``, а последняя "
"альтернатива содержит все от последнего ` `|` `к следующему разделителю "
"шаблонов. По этой причине обычной практикой является включение альтернатив в"
" скобках, чтобы минимизировать путаницу относительно того, где они "
"начинаются и заканчиваются."

# c47974e8be394b3a96ae5fbde7bc6d85
#: ../../regexp_syntax.rst:326
msgid ""
"Alternatives are tried from left to right, so the first alternative found "
"for which the entire expression matches, is the one that is chosen. This "
"means that alternatives are not necessarily greedy. For example: when "
"matching foo|foot against ``barefoot``, only the ``foo`` part will match, as"
" that is the first alternative tried, and it successfully matches the target"
" string. (This might not seem important, but it is important when you are "
"capturing matched text using parentheses.)"
msgstr ""
"Альтернативы пробуются слева направо, поэтому первая найденная альтернатива,"
" которой соответствует все выражение, - это та, которая выбрана. Это "
"означает, что альтернативы не обязательно являются жадными. Например: при "
"сопоставлении foo | foot с `` barefoot`` будет совпадать только часть `` "
"foo``, так как это первая альтернативная попытка, и она успешно "
"соответствует целевой строке. (Это может показаться не важным, но важно, "
"когда вы захватываете сопоставленный текст с помощью скобок.)"

# 7b0db3f69a174600bf34bfe25b261511
#: ../../regexp_syntax.rst:335
msgid ""
"Also remember that ``|`` is interpreted as a literal within square brackets,"
" so if You write ``[fee|fie|foe]`` You’re really only matching ``[feio|]``."
msgstr ""
"Также помните, что `` | `` интерпретируется как литерал в квадратных "
"скобках, поэтому, если вы напишите `` [fee | fie | foe] `` Вы действительно "
"соответствуете `` [feio |] ``."

# 36eede421b6a4e968f8462f2efadd46c
#: ../../regexp_syntax.rst:344
msgid "foo(bar|foo) matchs strings ‘foobar’ or ‘foofoo’."
msgstr ""
"foo (bar | foo) соответствует строкам &#39;foobar&#39; или &#39;foofoo&#39;."

# aa6e3c22db524b60846b1fa6ea87b986
#: ../../regexp_syntax.rst:347
msgid "Metacharacters - subexpressions"
msgstr "Метасимволы - подвыражения"

# 52c6047525cb405a8224e9cea120506d
#: ../../regexp_syntax.rst:349
msgid ""
"The bracketing construct ``( ... )`` may also be used for define r.e. "
"subexpressions (after parsing You can find subexpression positions, lengths "
"and actual values in MatchPos, MatchLen and `Match "
"<tregexpr_interface.html#tregexpr.match>`__ properties of TRegExpr, and "
"substitute it in template strings by `TRegExpr.Substitute "
"<tregexpr_interface.html#tregexpr.substitute>`__)."
msgstr ""
"Брекетная конструкция `` (...) `` также может использоваться для определения"
" подвыражений re (после анализа Вы можете найти позиции, длины и фактические"
" значения подвыражений в MatchPos, MatchLen и `Match "
"<tregexpr_interface.html#tregexpr.match> `__ свойства TRegExpr и заменить "
"его в строках шаблона на` TRegExpr.Substitute "
"<tregexpr_interface.html#tregexpr.substitute> `__)."

# 3ad9d40bb6e44a82b47121d71ca31d07
#: ../../regexp_syntax.rst:356
msgid ""
"Subexpressions are numbered based on the left to right order of their "
"opening parenthesis."
msgstr ""
"Субэкспрессии нумеруются в порядке слева направо их открывающей скобки."

# 62e9e88af070460883b9f0a5b68accf9
#: ../../regexp_syntax.rst:359
msgid ""
"First subexpression has number ``1`` (whole r.e. match has number ``0`` - "
"You can substitute it in `TRegExpr.Substitute "
"<tregexpr_interface.html#tregexpr.substitute>`__ as ``$0`` or ``$&``)."
msgstr ""
"Первое подвыражение имеет номер `` 1`` (все повторное совпадение имеет номер"
" `` 0`` - вы можете заменить его в `TRegExpr.Substitute "
"<tregexpr_interface.html#tregexpr.substitute> `__ as` `$ 0`` или` `$ &amp;` "
"`)."

# c415bc4601b04642876e944afe04a932
#: ../../regexp_syntax.rst:375
msgid "Metacharacters - backreferences"
msgstr "Метасимволы - обратные ссылки"

# 6b83dd2925a94284a63aaa9cf83558b4
#: ../../regexp_syntax.rst:377
msgid ""
"Metacharacters ``\\1`` through ``\\9`` are interpreted as backreferences. "
"``\\<n>`` matches previously matched subexpression ``#<n>``."
msgstr ""
"Метасимволы от `` \\ 1`` до `` \\ 9`` интерпретируются как обратные ссылки. "
"`` \\ <n> `` соответствует ранее найденному подвыражению `` # <n> ``."

# acc26861fb344313bdecdff6f626fae3
#: ../../regexp_syntax.rst:390
msgid ""
"``(['\"]?)(\\d+)\\1`` matchs ``\"13\"`` (in double quotes), or ``'4'`` (in "
"single quotes) or ``77`` (without quotes) etc"
msgstr ""
"`` ([&#39;&quot;]?) (\\ d +) \\ 1`` соответствует` `&quot; 13 &quot;` `(в "
"двойных кавычках) или` `&#39; 4&#39;`` (в одинарных кавычках) или` `77`` "
"(без кавычек) и т. д."

# 10d44507f07642ffad564d91080daaf5
#: ../../regexp_syntax.rst:394
msgid "Modifiers"
msgstr "Модификаторы"

# 0c63b470addc4ff29d3efc2f94fb91d5
#: ../../regexp_syntax.rst:396
msgid "Modifiers are for changing behaviour of TRegExpr."
msgstr "Модификаторы предназначены для изменения поведения TRegExpr."

# f42fac798a424605a6da99f290cff531
#: ../../regexp_syntax.rst:398
msgid "There are many ways to set up modifiers."
msgstr "Есть много способов настроить модификаторы."

# 03e59023c9184d39a7431d9800f66b6a
#: ../../regexp_syntax.rst:400
msgid ""
"Any of these modifiers may be embedded within the regular expression itself "
"using the `(?…) <regexp_syntax.html#inline_modifiers>`__ construct."
msgstr ""
"Любой из этих модификаторов может быть встроен в само регулярное выражение с"
" помощью `(? ...) <regexp_syntax.html#inline_modifiers> `__ построить."

# 9abd0acbc64f4ff4b1d750fa74a6b286
#: ../../regexp_syntax.rst:404
msgid ""
"Also, You can assign to appropriate TRegExpr properties (`ModifierX "
"<tregexpr_interface.html#tregexpr.modifier_x>`__ for example to change /x, "
"or ModifierStr to change all modifiers together). The default values for new"
" instances of TRegExpr object defined in `global variables "
"<#modifier_defs>`__, for example global variable RegExprModifierX defines "
"value of new TRegExpr instance ModifierX property."
msgstr ""
"Кроме того, вы можете назначить соответствующие свойства TRegExpr "
"(`ModifierX <tregexpr_interface.html#tregexpr.modifier_x> `__ например, "
"чтобы изменить / х, или ModifierStr, чтобы изменить все модификаторы "
"вместе). Значения по умолчанию для новых экземпляров объекта TRegExpr, "
"определенных в `глобальных переменных &lt;#modifier_defs&gt;` __, например, "
"глобальная переменная RegExprModifierX определяет значение нового свойства "
"ModifierX экземпляра TRegExpr."

# 23e63b9c72ac45c5990ae90b32703a53
#: ../../regexp_syntax.rst:412
msgid "### i"
msgstr "### я"

# 336d3504dd62438cbbf9e16a5f2b5f16
#: ../../regexp_syntax.rst:414
msgid ""
"Do case-insensitive pattern matching (using installed in you system locale "
"settings), see also `InvertCase <tregexpr_interface.html#invertcase>`__."
msgstr ""
"Выполните сопоставление с образцом без учета регистра (используя "
"установленные в вашей системе языковые настройки), см. Также `InvertCase "
"<tregexpr_interface.html#invertcase> `__."

# 973396b706db4d608878d8e3c0d3e070
#: ../../regexp_syntax.rst:418
msgid "### m"
msgstr "### м"

# ae46910d6aeb417d91171cb96808a329
#: ../../regexp_syntax.rst:420
msgid ""
"Treat string as multiple lines. That is, change ``^`` and ``$`` from "
"matching at only the very start or end of the string to the start or end of "
"any line anywhere within the string, see also `Line separators "
"<tregexpr_interface.html#line_separators>`__."
msgstr ""
"Обрабатывать строку как несколько строк. То есть, измените `` ^ `` и `` $ ``"
" с сопоставления только в самом начале или конце строки с началом или концом"
" любой строки в любом месте строки, см. Также `Разделители строк "
"<tregexpr_interface.html#line_separators> `__."

# 6ac79173e7194d87ae6f7f2575e41e7a
#: ../../regexp_syntax.rst:425
msgid "### s"
msgstr "### с"

# 7ff99496b53b4de8bb3f965560c7c840
#: ../../regexp_syntax.rst:427
msgid ""
"Treat string as single line. That is, change ``.`` to match any character "
"whatsoever, even a line separators (see also `Line separators "
"<tregexpr_interface.html#line_separators>`__), which it normally would not "
"match."
msgstr ""
"Обрабатывать строку как одну строку. То есть измените `` .``, чтобы он "
"соответствовал любому символу, даже разделителям строк (см. Также "
"разделители строк). <tregexpr_interface.html#line_separators> `__), что "
"обычно не совпадает."

# 13c9b693f190489596c8dc510e2e4e90
#: ../../regexp_syntax.rst:432
msgid "### g"
msgstr "### г"

# b482af902d594489a5d615c34239b1f0
#: ../../regexp_syntax.rst:434
msgid ""
"Non standard modifier. Switching it Off You’ll switch all following "
"operators into non-greedy mode (by default this modifier is On). So, if "
"modifier ``/g`` is Off then ``+`` works as ``+?``, ``\\*`` as ``\\*?`` and "
"so on"
msgstr ""
"Нестандартный модификатор. Выключение. Вы переведете все следующие операторы"
" в не жадный режим (по умолчанию этот модификатор включен). Итак, если "
"модификатор `` / g`` выключен, то `` + `` работает как `` +? ``, `` \\ * `` "
"Как `` \\ *? `` И т. Д."

# 1b7fe8d2c6674960878b97725cbe44a2
#: ../../regexp_syntax.rst:439
msgid "### x"
msgstr "### Икс"

# ab35a0a2b23949748b43104e68246a98
#: ../../regexp_syntax.rst:441
msgid ""
"Extend your pattern’s legibility by permitting whitespace and comments (see "
"explanation below)."
msgstr ""
"Увеличьте удобочитаемость вашего шаблона, разрешая пробелы и комментарии "
"(см. Пояснение ниже)."

# 61e8f0b5d8ff4b90b700f5e55c961b7c
#: ../../regexp_syntax.rst:444
msgid "### r"
msgstr "### р"

# d99041e46b0245dfbf138db8515d378b
#: ../../regexp_syntax.rst:446
msgid ""
"Non-standard modifier. If is set then range а-я additional include russian "
"letter ``ё``, ``А-Я``  additional include ``Ё``, and ``а-Я`` include all "
"russian symbols."
msgstr ""
"Нестандартный модификатор. Если установлено, то диапазон а-я дополнительно "
"включает русскую букву `` ё``, `` А-Я`` дополнительно включает `` Ё``, а `` "
"а-Я`` включает все русские символы."

# 9c0bf373099043a3a000067626f7fd73
#: ../../regexp_syntax.rst:450
msgid ""
"Sorry for foreign users, but it’s set by default. If you want switch if off "
"by default - set false to global variable `RegExprModifierR "
"<#modifier_defs>`__."
msgstr ""
"Извините за иностранных пользователей, но это установлено по умолчанию. Если"
" вы хотите выключить по умолчанию - установите false в глобальную переменную"
" `RegExprModifierR &lt;#modifier_defs&gt;` __."

# 3c377316934041718ac686f39bdf75dc
#: ../../regexp_syntax.rst:454
msgid ""
"The `modifier /x <regexp_syntax.html#modifier_x>`__ itself needs a little "
"more explanation. It tells the TRegExpr to ignore whitespace that is neither"
" backslashed nor within a character class. You can use this to break up your"
" regular expression into (slightly) more readable parts. The ``#`` character"
" is also treated as a metacharacter introducing a comment, for example:"
msgstr ""
"Модификатор / x <regexp_syntax.html#modifier_x> `___ сама нуждается в "
"немного большем объяснении. Он говорит TRegExpr игнорировать пробелы, "
"которые не имеют обратной косой черты и не находятся внутри класса символов."
" Вы можете использовать это, чтобы разбить ваше регулярное выражение на "
"(немного) более читаемые части. Символ `` # `` также рассматривается как "
"метасимвол, представляющий комментарий, например:"

# 37e93e770a8f4e238ece39fad50a3eae
#: ../../regexp_syntax.rst:469
msgid ""
"This also means that if you want real whitespace or ``#`` characters in the "
"pattern (outside a character class, where they are unaffected by ``/x``), "
"that you’ll either have to escape them or encode them using octal or hex "
"escapes. Taken together, these features go a long way towards making regular"
" expressions text more readable."
msgstr ""
"Это также означает, что если вам нужны реальные пробелы или символы `` # `` "
"в шаблоне (вне класса символов, где они не затрагиваются `` / x``), вам "
"придется либо экранировать их, либо кодировать их. используя восьмеричные "
"или шестнадцатеричные побеги. Взятые вместе, эти функции имеют большое "
"значение для того, чтобы сделать текст регулярных выражений более "
"читабельным."

# aa64c2f338a04b289fe78d3cfa633298
#: ../../regexp_syntax.rst:476
msgid "Perl extensions"
msgstr "Расширения Perl"

# a9b874f64bfd435892ffbcc7a97df1a0
#: ../../regexp_syntax.rst:481
msgid ""
"You may use it into r.e. for modifying modifiers by the fly. If this "
"construction inlined into subexpression, then it effects only into this "
"subexpression"
msgstr ""
"Вы можете использовать его в re для модификации модификаторов на лету. Если "
"эта конструкция встроена в подвыражение, то она влияет только на это "
"подвыражение"

# 53b90f25371d42e8a3ef2f3433b16fd0
#: ../../regexp_syntax.rst:498
msgid "(?#text)"
msgstr "(?#текст)"

# 02ed8d39191842edbf00cc22d3f634e0
#: ../../regexp_syntax.rst:500
msgid ""
"A comment, the text is ignored. Note that TRegExpr closes the comment as "
"soon as it sees a ``)``, so there is no way to put a literal ``)`` in the "
"comment."
msgstr ""
"Комментарий, текст игнорируется. Обратите внимание, что TRegExpr закрывает "
"комментарий, как только он видит ``) ``, поэтому нет способа вставить "
"литерал ``) `` в комментарий."

# 92033bf22124478a99083d06a522aca6
#: ../../regexp_syntax.rst:504
msgid ""
"Just now don’t forget to read the `FAQ <faq.html>`__ (expecially ‘non-"
"greediness’ optimization `question <faq.html#nongreedyoptimization>`__)."
msgstr ""
"Только сейчас не забудьте прочитать FAQ <faq.html> `__ (особенно вопрос "
"оптимизации без жадности) <faq.html#nongreedyoptimization> `__)."
