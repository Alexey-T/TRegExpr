# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Andrey Sorokin
# This file is distributed under the same license as the TRegExpr package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Andrey Sorokin <filbert@yandex.ru>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TRegExpr 0.952\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-08 11:59+0300\n"
"PO-Revision-Date: 2019-05-08 09:12+0000\n"
"Last-Translator: Andrey Sorokin <filbert@yandex.ru>, 2019\n"
"Language-Team: Bulgarian (https://www.transifex.com/masterAndrey/teams/98461/bg/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: bg\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 7bbeef6bea68422db66aa6085017ef9f
#: ../../translations_list.rst:6
msgid "`Русский <https://regex.masterandrey.com/ru/latest/index.html>`__"
msgstr "`Русский <https://regex.masterandrey.com/ru/latest/index.html>`__"

# 47d26c4e88e1421c992425b65f8521ae
#: ../../translations_list.rst:7
msgid "`Deutsch <https://regex.masterandrey.com/de/latest/index.html>`__"
msgstr "`Deutsch <https://regex.masterandrey.com/de/latest/index.html>`__"

# 552aef36d89e4ec5a789d12e92aad0c5
#: ../../translations_list.rst:8
msgid "`Български <https://regex.masterandrey.com/bg/latest/index.html>`__"
msgstr "`Български <https://regex.masterandrey.com/bg/latest/index.html>`__"

# e4e735c9540244d3a49b5f5d285b4c61
#: ../../translations_list.rst:9
msgid "`Français <https://regex.masterandrey.com/fr/latest/index.html>`__"
msgstr "`Френски <https://regex.masterandrey.com/fr/latest/index.html>`__"

# e2a3dc0c705640788818a205bca41480
#: ../../translations_list.rst:10
msgid "`Español <https://regex.masterandrey.com/es/latest/index.html>`__"
msgstr "`Español <https://regex.masterandrey.com/es/latest/index.html>`__"

# cf1fdea7e27f4b6b9e33211b59fc1c64
#: ../../faq.rst:4
msgid "FAQ"
msgstr "ЧЗВ"

# d6fc760c6fc94d9a899a479298b4c3dc
#: ../../faq.rst:7
msgid "I found a terrible bug: TRegExpr raises Access Violation exception!"
msgstr ""
"Намерих ужасна грешка: TRegExpr повдига изключението за нарушение на достъп!"

# 40da4f3424204e0f9f5560fb3c87b10a
# 40da4f3424204e0f9f5560fb3c87b10a
# 40da4f3424204e0f9f5560fb3c87b10a
# 40da4f3424204e0f9f5560fb3c87b10a
# 40da4f3424204e0f9f5560fb3c87b10a
# 40da4f3424204e0f9f5560fb3c87b10a
# 40da4f3424204e0f9f5560fb3c87b10a
# 3833e9a61eba4b809278c359680e17ca
# 40da4f3424204e0f9f5560fb3c87b10a
# 40da4f3424204e0f9f5560fb3c87b10a
#: ../../faq.rst:9 ../../faq.rst:34 ../../faq.rst:44 ../../faq.rst:60
#: ../../faq.rst:73 ../../faq.rst:93 ../../faq.rst:104 ../../faq.rst:124
#: ../../faq.rst:151 ../../faq.rst:163
msgid "**Answer**"
msgstr "**Отговор**"

# 42f037ad3d0d4c54b07a7dca4f7e1779
#: ../../faq.rst:11
msgid ""
"You must create the object before usage. So, after you declared something "
"like:"
msgstr ""
"Трябва да създадете обекта преди употреба. Така че, след като сте "
"декларирали нещо като:"

# a5956a2cf8c44909bc4302f8810f37ba
#: ../../faq.rst:14
msgid "r : TRegExpr"
msgstr "r: TRegExpr"

# e865298e59094744b6eb09fa43db311b
#: ../../faq.rst:18
msgid "do not forget to create the object instance:"
msgstr "не забравяйте да създадете екземпляр на обекта:"

# c0ed663f35dc4b31b84a24a42dfb7508
#: ../../faq.rst:20
msgid "r := TRegExpr.Create."
msgstr "r: = TRegExpr.Създайте."

# c74dd30f3876405c96375f50eba0c708
#: ../../faq.rst:25
msgid "Regular expressions with (?=...) do not work"
msgstr "Регулярните изрази с (? = ...) не работят"

# 4c3e888756b74937a190a3d129fa0752
#: ../../faq.rst:27
msgid ""
"Look ahead is not implemented in the TRegExpr. But in many cases you can "
"easily `replace it with simple subexpressions "
"<regular_expressions.html#lookahead>`_."
msgstr ""
"Погледнете напред не се прилага в TRegExpr. Но в много случаи лесно можете "
"да го замените с обикновени `субекспресии "
"<regular_expressions.html#lookahead>`_."

# 77037f107b7e47abaa5fcf3a28e7b18c
#: ../../faq.rst:32
msgid "Does it support Unicode?"
msgstr "Поддържа ли Unicode?"

# 155b188809f94d1e9cca25cf1937d82d
#: ../../faq.rst:36
msgid "`How to use Unicode <tregexpr.html#unicode>`__"
msgstr "`Как да използваме Unicode <tregexpr.html#unicode>`__"

# 836b9a07a857496c8570a92e1ff86f73
#: ../../faq.rst:39
msgid "Why does TRegExpr return more then one line?"
msgstr "Защо TRegExpr връща повече от един ред?"

# 27f1d5918d444c55b07292a55a65fd49
#: ../../faq.rst:41
msgid ""
"For example, r.e. ``<font .\\*>`` returns the first ``<font``, then the rest"
" of the file including last ``</html>``."
msgstr ""
"Например, `` <font .\\*>`` връща първото ``</font> <font``, then the rest of"
" the file including last ``</html> <font .\\*>``.</font>"

# 2456e655103c4b788ccb1bf90ed3772b
#: ../../faq.rst:46
msgid ""
"For backward compatibility, `modifier /s "
"<regular_expressions.html#modifier_s>`__ is ``On`` by default."
msgstr ""
"За обратна съвместимост, `модификатор / и "
"<regular_expressions.html#modifier_s>`__ е` `On`` по подразбиране."

# 74667df4efa94c54bb5fa7140be21392
#: ../../faq.rst:49
msgid ""
"Switch it Off and ``.`` will match any but `Line separators "
"<regular_expressions.html#syntax_line_separators>`__ - exactly as you wish."
msgstr ""
"Включете го и &quot;.&quot; Ще съвпадне с всички, но `Разделители на линии "
"<regular_expressions.html#syntax_line_separators>`__ - точно както желаете."

# b31d50bb744f40ae9282e43a1967fad6
#: ../../faq.rst:52
msgid "BTW I suggest ``<font ([^\\n>]*)>``, in ``Match[1]`` will be the URL."
msgstr ""
"BTW Предлагам `` <font ([^\\n>] *)&gt; ``, в `` Match [1] `` ще бъде URL "
"адресът.</font>"

# 65c336793c8746af86f7916910aa1bd4
#: ../../faq.rst:55
msgid "Why does TRegExpr return more then I expect?"
msgstr "Защо TRegExpr се връща повече, отколкото очаквам?"

# d751c0f0d0e7458d905073d0ca772bee
#: ../../faq.rst:57
msgid ""
"For example r.e. ``<p>(.+)</p>`` applyed to string ``<p>a</p><p>b</p>`` "
"returns ``a</p><p>b`` but not ``a`` as I expected."
msgstr ""
"Например re `` <p> (. +) </p> `` приложен към низ `` <p> а </p><p> б </p> ``"
" връща `` a </p><p> b`` но не ``a``, както очаквах."

# 2e19907717ae4932b951c9e57b2bbd5a
#: ../../faq.rst:62
msgid ""
"By default all operators works in ``greedy`` mode, so they match as more as "
"it possible."
msgstr ""
"По подразбиране всички оператори работят в ``greedy`` режим, така че се "
"съчетават колкото се може повече."

# aff79b8422d0482f8c03a4f9e3e5c2f6
#: ../../faq.rst:65
msgid ""
"If you want ``non-greedy`` mode you can use ``non-greedy`` operators like "
"``+?`` and so on or switch all operators into ``non-greedy`` mode with help "
"of modifier ``g`` (use appropriate TRegExpr properties or operator ``?(-g)``"
" in r.e.)."
msgstr ""
"Ако искате ``алчен`` режим, можете да използвате ``алчни`` оператори като "
"``+?`` И т.н. или да превключите всички оператори в ``неагресивен`` режим с "
"помощта на модификатор ``g`` (използвайте подходящи свойства на TRegExpr или"
" оператор ``?(-g)`` в re)."

# 98b9a7d955c94ac699086ed6b50c59e2
#: ../../faq.rst:71
msgid "How to parse sources like HTML with help of TRegExpr"
msgstr "Как да анализираме източници като HTML с помощта на TRegExpr"

# 84b05a8a734c400f84412a496820942a
#: ../../faq.rst:75
msgid "Sorry folks, but it's nearly impossible!"
msgstr "За съжаление, хора, но е почти невъзможно!"

# 8d6e67a8dc71482fab61baec80f05bb3
#: ../../faq.rst:77
msgid ""
"Of course, you can easily use TRegExpr for extracting some information from "
"HTML, as shown in my examples, but if you want accurate parsing you have to "
"use real parser, not r.e."
msgstr ""
"Разбира се, можете лесно да използвате TRegExpr за извличане на информация "
"от HTML, както е показано в моите примери, но ако искате точен парс, трябва "
"да използвате истински парсер, а не"

# 6c0a493a04494f7aae37970898a379f4
#: ../../faq.rst:81
msgid ""
"You can read full explanation in Tom Christiansen and Nathan Torkington "
"``Perl Cookbook``, for example."
msgstr ""
"Можете да прочетете пълното обяснение в Том Кристиансен и Нейтън Торкингтън "
"&quot;Perl Cookbook&quot;, например."

# ed36cb64ef9248de884cbb0c9a7d08f9
#: ../../faq.rst:84
msgid ""
"In short - there are many structures that can be easy parsed by real parser "
"but cannot at all by r.e., and real parser is much faster to do the parsing,"
" because r.e. doesn't simply scan input stream, it performs optimization "
"search that can take a lot of time."
msgstr ""
"Накратко - има много структури, които могат лесно да бъдат анализирани от "
"истинския анализатор, но изобщо не могат да бъдат рестартирани, а реалният "
"парсер е много по-бърз, за да направи синтактичен анализ, защото повторно не"
" сканира входящия поток, той извършва оптимизационно търсене, което може да "
"отнеме много време."

# ab01e6cbba074618b1022ffead0efc80
#: ../../faq.rst:91
msgid "Is there a way to get multiple matches of a pattern on TRegExpr?"
msgstr "Има ли начин да получите множество съвпадения на модел в TRegExpr?"

# fe91a4bc0fd4447489141747ee0ea224
#: ../../faq.rst:95
msgid "You can iterate matches with ExecNext method."
msgstr "Можете да повторите съвпадения с метода ExecNext."

# 641d4fc669be4c9aa475918aa91126ed
#: ../../faq.rst:97
msgid ""
"If you want some example, please take a look at ``TRegExpr.Replace`` method "
"implementation or at the examples for `HyperLinksDecorator <demos.html>`_"
msgstr ""
"Ако искате някакъв пример, моля, вижте реализацията на метода "
"&quot;TRegExpr.Replace&quot; или примери за `HyperLinksDecorator "
"<demos.html>`_"

# 9a455417a3d044c9b984ae73dcc64ace
#: ../../faq.rst:102
msgid ""
"I am checking user input. Why does TRegExpr return ``True`` for wrong input "
"strings?"
msgstr ""
"Проверявам въвеждането от потребителя. Защо TRegExpr връща &quot;True&quot; "
"за погрешни низове?"

# e7dd38f412234006aefa108dc8555b35
#: ../../faq.rst:106
msgid ""
"In many cases TRegExpr users forget that regular expression is for "
"**search** in input string."
msgstr ""
"В много случаи потребителите на TRegExpr забравят, че регулярният израз е за"
" ** search ** във входния низ."

# 84c50dddfedc418ca4e5de33a2388527
#: ../../faq.rst:109
msgid ""
"So, for example if you use ``\\d{4,4}`` expression, you will get success for"
" wrong user inputs like ``12345`` or ``any letters 1234``."
msgstr ""
"Така например, ако използвате `` {4,4} `` израз, ще получите успех за "
"неправилни потребителски входове като ``12345`` или `` всякакви букви "
"1234``."

# 555ace2776ff491baccc6bc35a2574b3
#: ../../faq.rst:112
msgid ""
"You have to check from line start to line end to ensure there are no "
"anything else around: ``^\\d{4,4}$``."
msgstr ""
"Трябва да проверите от начало на ред до край на ред, за да сте сигурни, че "
"няма нищо друго около: `` ^ {4,4} $ ``."

# 3c901ebacebb4af69e073edc07332ecd
#: ../../faq.rst:118
msgid "Why does non-greedy iterators sometimes work as in greedy mode?"
msgstr "Защо понякога алчните итератори работят както в алчен режим?"

# 360da2fcf4f04302a1ec1b9557fad598
#: ../../faq.rst:120
msgid ""
"For example, the r.e. ``a+?,b+?`` applied to string ``aaa,bbb`` matches "
"``aaa,b``, but should it not match ``a,b`` because of non-greediness of "
"first iterator?"
msgstr ""
"Например, ре-`a + ?, b +?` `, Приложено към низа` `aaa, bbb``, съвпада с` "
"`aaa, b``, но ако не съвпада с` `a, b`` заради не-алчността на първия "
"итератор?"

# fc89dddf135b42ac956db2e8891af351
#: ../../faq.rst:126
msgid ""
"This is because of TRegExpr way to work. In fact many others r.e. engines "
"work exactly the same: they performe only ``simple`` search optimization, "
"and do not try to do the best optimization."
msgstr ""
"Това е така, защото на TRegExpr начинът на работа. В действителност много "
"други двигатели работят по същия начин: те извършват само &quot;проста&quot;"
" оптимизация на търсенето и не се опитват да направят най-добрата "
"оптимизация."

# ef8b9a54e25e4fa9a9ae7ab5904a4b17
#: ../../faq.rst:130
msgid ""
"In some cases it's bad, but in common it's rather advantage then limitation,"
" because of performance and predictability reasons."
msgstr ""
"В някои случаи това е лошо, но като цяло е по-скоро предимство, отколкото "
"ограничение, поради причини за производителност и предсказуемост."

# 947ff8c1afe940479c8fd0c41677ae41
#: ../../faq.rst:133
msgid ""
"The main rule - r.e. first of all try to match from current place and only "
"if that's completely impossible move forward by one char and try again from "
"next position in the text."
msgstr ""
"Главното правило - преди всичко се опитвайте да съвпадат от текущото място и"
" само ако това е напълно невъзможно да се движите напред с един знак и "
"опитайте отново от следващата позиция в текста."

# 7c46172a4c3b4941b63c368dc1b2a948
#: ../../faq.rst:137
msgid ""
"So, if you use ``a,b+?`` it'll match ``a,b``. In case of ``a+?,b+?`` it's "
"now not recommended (we add non-greedy modifyer) but still possible to match"
" more then one ``a``, so TRegExpr will do it."
msgstr ""
"Така че, ако използвате `` a, b +? ``, Ще съвпадне `` a, b``. В случай на ``"
" a + ?, b +? `` Сега не се препоръчва (добавяме алчни модификатори), но все "
"пак е възможно да се съчетава повече от един ``a``, така че TRegExpr ще го "
"направи."

# 41feed27e8ad405faa9ea1e4b0c8d18f
#: ../../faq.rst:141
msgid ""
"TRegExpr like Perl's or Unix's r.e. doesn't attempt to move forward and "
"check - would it will be \"better\" match. Fisrt of all, just because there "
"is no way to say it's more or less good match."
msgstr ""
"TRegExpr като Perl или Unix не се опитва да се движи напред и чек - дали ще "
"бъде &quot;по-добър&quot; мач. От всички, просто защото няма начин да се "
"каже, че е по-малко или по-малко добро."

# 781bb73b9cd34896bd61ea052d2869ea
#: ../../faq.rst:147
msgid "How can I use TRegExpr with Borland C++ Builder?"
msgstr "Как мога да използвам TRegExpr с Borland C ++ Builder?"

# 252a4182e2ca41febf89678337efb6c2
#: ../../faq.rst:149
msgid ""
"I have a problem since no header file (``.h`` or ``.hpp``) is available."
msgstr ""
"Имам проблем, тъй като не е наличен заглавен файл (&quot;.h&quot; или "
"&quot;.hpp&quot;)."

# c17bbf36186946eb9b60c1c609ec12ec
#: ../../faq.rst:153
msgid "Add ``RegExpr.pas`` to ``bcb`` project."
msgstr "Добавете ``RegExpr.pas`` към проекта ``bcb``."

# 7b1b72640e2c46c7a5ae52e5dc598b7d
#: ../../faq.rst:154
msgid "Compile project. This generates the header file ``RegExpr.hpp``."
msgstr "Съставете проект. Това генерира заглавния файл ``RegExpr.hpp``."

# 16ee016a9fa547d7b412bd44ea526e44
#: ../../faq.rst:155
msgid "Now you can write code which uses the ``RegExpr`` unit."
msgstr "Сега можете да напишете код, който използва модула ``RegExpr``."

# 92c071830b604493a9b0982e4c690f0d
#: ../../faq.rst:156
msgid "Don't forget to add  ``#include “RegExpr.hpp”`` where needed."
msgstr ""
"Не забравяйте да добавите `` #include &#39;RegExpr.hpp&#39; `` където е "
"необходимо."

# a14b93d760474e5f83f70bb9479d161b
#: ../../faq.rst:157
msgid ""
"Don't forget to replace all ``\\`` in regular expressions with ``\\\\`` or "
"redefined `EscChar <tregexpr.html#escchar>`__ const."
msgstr ""
"Не забравяйте да замените всички `` в регулярни изрази с `` `или "
"предефинира` `EscChar \\ t <tregexpr.html#escchar>`__ const."

# 6c8450146f0841d1a013cff6b32e8dcc
#: ../../faq.rst:161
msgid ""
"Why many r.e. (including r.e. from TRegExpr help and demo) work wrong in "
"Borland C++ Builder?"
msgstr ""
"Защо много от тях (включително re от TRegExpr помощ и демо) работят погрешно"
" в Borland C ++ Builder?"

# 86691c4364694b7a8784006481ec491e
#: ../../faq.rst:165
msgid ""
"The hint is in the previous question ;) Symbol ``\\`` has special meaning in"
" ``C++``, so you have to ``escape`` it (as described in previous answer). "
"But if you don't like r.e. like ``\\\\w+\\\\\\\\w+\\\\.\\\\w+`` you can "
"redefine the constant ``EscChar`` (in ``RegExpr.pas``). For example "
"``EscChar = \"/\"``. Then you can write ``/w+/w+/./w+``, looks unusual but "
"more readable."
msgstr ""
"Намекът е в предишния въпрос;) Символ `` има специално значение в `` C ++ "
"``, така че трябва да го ``избягаш`` (както е описано в предишния отговор). "
"Но ако не ви харесва отново като `` + + &#39;&#39; w + `` можете да "
"предефинирате константата ``EscChar`` (в ``RegExpr.pas``). Например `` "
"EscChar = &quot;/&quot; ``. Тогава можете да напишете `/ w + / w + /. / W +`"
" `, изглежда необичайно, но по-разбираемо."
