# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Andrey Sorokin
# This file is distributed under the same license as the TRegExpr package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
# Translators:
# Andrey Sorokin <filbert@yandex.ru>, 2019
msgid ""
msgstr ""
"Project-Id-Version: TRegExpr 0.952\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-11-28 18:10+0300\n"
"PO-Revision-Date: 2019-11-29 05:25+0000\n"
"Last-Translator: Andrey Sorokin <filbert@yandex.ru>\n"
"Language-Team: Russian <https://hosted.weblate.org/projects/tregexpr/faq/ru/>"
"\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<="
"4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
"X-Generator: Weblate 3.10-dev\n"
"Generated-By: Babel 2.3.4\n"

# 420897fb25af4c7b8320dec8b9bf7c95
#: ../../faq.rst:6
msgid "English"
msgstr "`English <https://regex.sorokin.engineer/en/latest/faq.html>`__"

# 7bea544eb2d240dabc78f1f77a1063d6
#: ../../faq.rst:7
msgid "`Русский <https://regex.sorokin.engineer/ru/latest/faq.html>`__"
msgstr "Русский"

# b0f7d1abc0e7422a94b4301d22eb385b
#: ../../faq.rst:8
msgid "`Deutsch <https://regex.sorokin.engineer/de/latest/faq.html>`__"
msgstr "`Deutsch <https://regex.sorokin.engineer/de/latest/faq.html>`__"

# 841f2d0c2dcf4d35aa373e643f5340ae
#: ../../faq.rst:9
msgid "`Български <https://regex.sorokin.engineer/bg/latest/faq.html>`__"
msgstr "`Български <https://regex.sorokin.engineer/bg/latest/faq.html>`__"

# 456ebf6951114172ab25b45ff17c5ead
#: ../../faq.rst:10
msgid "`Français <https://regex.sorokin.engineer/fr/latest/faq.html>`__"
msgstr "`Français <https://regex.sorokin.engineer/fr/latest/faq.html>`__"

# 8f281f02d09140e882d4e5e505d8bae2
#: ../../faq.rst:11
msgid "`Español <https://regex.sorokin.engineer/es/latest/faq.html>`__"
msgstr "`Español <https://regex.sorokin.engineer/es/latest/faq.html>`__"

# 752926408a55400c8e44b907548c2349
#: ../../faq.rst:14
msgid "FAQ"
msgstr "Часто задаваемые вопросы"

# f2daa8af18924db0ad38224e1a7faca5
#: ../../faq.rst:17
msgid "I found a terrible bug: TRegExpr raises Access Violation exception!"
msgstr "Я обнаружил ужасную ошибку: TRegExpr вызывает исключение Access Violation!"

# 26f438db66e247e488f4348a15590b30
# 77971200a97946b6b238c0736270945d
# f508863794fe4e53b260e12b0ac89b5a
# 80187db49b0b46b3a6ee48158fd42bba
# 8a4cae71dfd949d3ad31696e7907a127
# 293f6243d22143d489329923e2fca878
# f8607cdf08694ad2abfd190a7a9b6ac1
# d8ef20469e4244fbbcde975c75897209
# 62d80bab9af74b41bd449cadfbf74ea8
# 6e16604b5b6f40948ef74c01a559c635
# 21f81bf320364bc9bf014c2ef8a62289
#: ../../faq.rst:19 ../../faq.rst:44 ../../faq.rst:54 ../../faq.rst:70
#: ../../faq.rst:83 ../../faq.rst:103 ../../faq.rst:114 ../../faq.rst:134
#: ../../faq.rst:161 ../../faq.rst:173 ../../faq.rst:186
msgid "**Answer**"
msgstr "**Ответ**"

# 206dad10e1f04a07be8103cc18f6264b
#: ../../faq.rst:21
msgid ""
"You must create the object before usage. So, after you declared something"
" like:"
msgstr ""
"Вы должны создать объект перед использованием. Итак, после того, как вы "
"объявили что-то вроде:"

# 521a3113332e4620b61570186261cef2
#: ../../faq.rst:24
msgid "r : TRegExpr"
msgstr "r: TRegExpr"

# 285f6ff79ebe43a58dff6207e0393369
#: ../../faq.rst:28
msgid "do not forget to create the object instance:"
msgstr "не забудьте создать экземпляр объекта:"

# 167995716d7249a09736f89026859927
#: ../../faq.rst:30
msgid "r := TRegExpr.Create."
msgstr "r: = TRegExpr.Create."

# eb540de059bd43ba91837ae4ce920424
#: ../../faq.rst:35
msgid "Regular expressions with (?=...) do not work"
msgstr "Регулярные выражения с (? = ...) не работают"

# 193311055f3a48d28aa133561764c44d
#: ../../faq.rst:37
msgid ""
"Look ahead is not implemented in the TRegExpr. But in many cases you can "
"easily `replace it with simple subexpressions "
"<regular_expressions.html#lookahead>`_."
msgstr ""
"Look-ahead не реализованы в TRegExpr. Но во многих случаях вы можете "
"легко заменить их простыми `подвыражениями "
"<regular_expressions.html#lookahead>`_."

# 97d85620e543485a809cdb0b6fe0d853
#: ../../faq.rst:42
msgid "Does it support Unicode?"
msgstr "Поддерживает ли он Юникод?"

# 887d637ff8ab470a809e1a032b5a43ff
#: ../../faq.rst:46
msgid "`How to use Unicode <tregexpr.html#unicode>`__"
msgstr "`Как использовать Юникод <tregexpr.html#unicode>`__"

# 2ccc0e6d7c8d4eec8cbdc4bf0823b534
#: ../../faq.rst:49
msgid "Why does TRegExpr return more then one line?"
msgstr "Почему TRegExpr возвращает более одной строки?"

# b77841418b664374bcf4e405134a2cc1
#: ../../faq.rst:51
msgid ""
"For example, r.e. ``<font .\\*>`` returns the first ``<font``, then the "
"rest of the file including last ``</html>``."
msgstr ""
"Например, регулярное выражение ``<font .\\*>`` возвращает первый же "
"``<font``, далее весь последующий текст до финального``</html>``."

# c260c550f14d42e2acc808a1c3188ce0
#: ../../faq.rst:56
msgid ""
"For backward compatibility, `modifier /s "
"<regular_expressions.html#modifier_s>`__ is ``On`` by default."
msgstr ""
"Для обратной совместимости `модификатор /s "
"<regular_expressions.html#modifier_s>`_ по умолчанию ``Вкл``."

# c45c18032a9345928a77bd43a8a8dae0
#: ../../faq.rst:59
msgid ""
"Switch it Off and ``.`` will match any but `Line separators "
"<regular_expressions.html#syntax_line_separators>`__ - exactly as you "
"wish."
msgstr ""
"Выключите его, и ``.`` будет соответствовать любому символу, кроме "
"`Разделителей строк <regular_expressions.html#syntax_line_separators>`_ -"
" именно так, как вы хотите."

# 3249cfd08df34091a829e5182ecd38fe
#: ../../faq.rst:62
msgid "BTW I suggest ``<font ([^\\n>]*)>``, in ``Match[1]`` will be the URL."
msgstr "Я лично предлагаю ``<font ([^\\n>] *)>``, тогда в ``Match [1]`` будет URL."

# 26323d71542949ca9eeeb5a8e2e99f0c
#: ../../faq.rst:65
msgid "Why does TRegExpr return more then I expect?"
msgstr "Почему TRegExpr возвращает больше, чем я ожидаю?"

# a9365ad0638a41d982349828378e463b
#: ../../faq.rst:67
msgid ""
"For example r.e. ``<p>(.+)</p>`` applyed to string ``<p>a</p><p>b</p>`` "
"returns ``a</p><p>b`` but not ``a`` as I expected."
msgstr ""
"Например ``<p> (. +) </p>`` для строки ``<p>a </p><p> b </p>`` возвращает"
" ``a </p><p> b`` но не ``a``, как ожидается."

# 52d76eaf92d34fee9e86a07b917a01ba
#: ../../faq.rst:72
msgid ""
"By default all operators works in ``greedy`` mode, so they match as more "
"as it possible."
msgstr ""
"По умолчанию все операторы работают в ``жадном`` режиме, поэтому они "
"совпадают как можно больше."

# f5154b21ae094665be3fc94d43b159c2
#: ../../faq.rst:75
msgid ""
"If you want ``non-greedy`` mode you can use ``non-greedy`` operators like"
" ``+?`` and so on or switch all operators into ``non-greedy`` mode with "
"help of modifier ``g`` (use appropriate TRegExpr properties or operator "
"``?(-g)`` in r.e.)."
msgstr ""
"Если вам нужен режим ``не жадный режим``, вы можете использовать ``не "
"жадные`` варианты операторов, такие как ``+?`` и т. д., или переключить "
"все операторы в ``не жадный`` режим с помощью модификатора ``g`` "
"(используйте соответствующие свойства TRegExpr или оператор ``?(-g)`` "
"внутри выражения)."

# 7dd2a4d8360a49e3bdb8822df040a2ab
#: ../../faq.rst:81
msgid "How to parse sources like HTML with help of TRegExpr?"
msgstr "Как анализировать HTML, с помощью TRegExpr?"

# 90a1c8b6cfdf4eec8d99b78a5f02e436
#: ../../faq.rst:85
msgid "Sorry folks, but it's nearly impossible!"
msgstr "Извините, ребята, но это почти невозможно!"

# c10b3fda069e412d87d650968a7ca167
#: ../../faq.rst:87
msgid ""
"Of course, you can easily use TRegExpr for extracting some information "
"from HTML, as shown in my examples, but if you want accurate parsing you "
"have to use real parser, not r.e."
msgstr ""
"Конечно, вы можете легко использовать TRegExpr для извлечения некоторой "
"информации из HTML, как показано в моих примерах, но если вам нужен точный "
"синтаксический анализ, вы должны использовать полноценный парсер, а не "
"регулярные выражения"

# 9565d64088b445999b49b8f42e7ef392
#: ../../faq.rst:91
msgid ""
"You can read full explanation in Tom Christiansen and Nathan Torkington "
"``Perl Cookbook``, for example."
msgstr ""
"Вы можете прочитать полное объяснение в Том Кристиансен и Натан "
"Торкингтон ``Perl Cookbook``, например."

# a979714a9a114da19f62da5e893dfec5
#: ../../faq.rst:94
msgid ""
"In short - there are many structures that can be easy parsed by real "
"parser but cannot at all by r.e., and real parser is much faster to do "
"the parsing, because r.e. doesn't simply scan input stream, it performs "
"optimization search that can take a lot of time."
msgstr ""
"Вкратце - есть много структур, которые могут быть легко проанализированы "
"реальным парсером, но не могут быть проанализированы регулярными "
"выражениями. Полноценный парсер намного быстрее выполнит синтаксический "
"анализ."

# 97ee2ad3977e4ab1a3a1eff016bafbd4
#: ../../faq.rst:101
msgid "Is there a way to get multiple matches of a pattern on TRegExpr?"
msgstr "Есть ли способ получить несколько совпадений шаблона на TRegExpr?"

# 600facc6629740f0a73fe7f26f6a8f35
#: ../../faq.rst:105
msgid "You can iterate matches with ExecNext method."
msgstr "Вы искать последующие совпадения с помощью метода ExecNext."

# 7e859115978243a5b33c8f17a8082f99
#: ../../faq.rst:107
msgid ""
"If you want some example, please take a look at ``TRegExpr.Replace`` "
"method implementation or at the examples for `HyperLinksDecorator "
"<demos.html>`_"
msgstr ""
"Если вам нужен какой-то пример, посмотрите на реализацию метода "
"``TRegExpr.Replace`` или на примеры для `HyperLinksDecorator "
"<demos.html>`_"

# b5c024a5edbc4688b1788d005c9b3e6c
#: ../../faq.rst:112
msgid ""
"I am checking user input. Why does TRegExpr return ``True`` for wrong "
"input strings?"
msgstr ""
"Я проверяю пользовательский ввод. Почему TRegExpr возвращает ``True`` для"
" неправильных входных строк?"

# 363dd48f528141fb9967c3099e348141
#: ../../faq.rst:116
msgid ""
"In many cases TRegExpr users forget that regular expression is for "
"**search** in input string."
msgstr ""
"Во многих случаях пользователи TRegExpr забывают, что регулярное "
"выражение предназначено для **поиска** во входной строке."

# ad3acde08e0244228a185c3e6c478df6
#: ../../faq.rst:119
msgid ""
"So, for example if you use ``\\d{4,4}`` expression, you will get success "
"for wrong user inputs like ``12345`` or ``any letters 1234``."
msgstr ""
"Так, например,  выражение ``\\d{4,4}`` совпадет и с ``12345`` и с ``любые"
" буквы 1234``."

# 2c47d74864344db19988551ad8ebe20f
#: ../../faq.rst:122
msgid ""
"You have to check from line start to line end to ensure there are no "
"anything else around: ``^\\d{4,4}$``."
msgstr ""
"Вы должны проверить от начала строки до конца строки, чтобы убедиться, "
"что вокруг ничего больше нет: ``^\\d{4,4}$``."

# f00c1ac1bcdd42ffbe4b4aa40241387e
#: ../../faq.rst:128
msgid "Why does non-greedy iterators sometimes work as in greedy mode?"
msgstr "Почему не жадные итераторы иногда работают в жадном режиме?"

# 1a121c878b4c4b63b20a749b87bc99ef
#: ../../faq.rst:130
msgid ""
"For example, the r.e. ``a+?,b+?`` applied to string ``aaa,bbb`` matches "
"``aaa,b``, but should it not match ``a,b`` because of non-greediness of "
"first iterator?"
msgstr ""
"Например, ``a+?,b+?``, для строки ``aaa,bbb``, найдет ``aaa,b``, но не "
"``a,b`` хотя первый итератор не жаден?"

# 879b8747caa64d8fa278504db8fd7d9d
#: ../../faq.rst:136
msgid ""
"This is because of TRegExpr way to work. In fact many others r.e. engines"
" work exactly the same: they performe only ``simple`` search "
"optimization, and do not try to do the best optimization."
msgstr ""
"Регулярные выражения только ищут первое же совпадение и не пытаются найти"
" \"наилучшее\" совпадение."

# 2b2c4716a2984f6f82a4898689c9869e
#: ../../faq.rst:140
msgid ""
"In some cases it's bad, but in common it's rather advantage then "
"limitation, because of performance and predictability reasons."
msgstr ""
"В некоторых случаях это плохо, но в целом это скорее преимущество, чем "
"ограничение, по причинам производительности и предсказуемости."

# 61977f1917a0434bb9e1eaa68464d334
#: ../../faq.rst:143
msgid ""
"The main rule - r.e. first of all try to match from current place and "
"only if that's completely impossible move forward by one char and try "
"again from next position in the text."
msgstr ""
"Основное правило - сначала пытаемся найти соотвествие, начиная с текущей "
"позиции в строке и, только если это невозможно, продвигаемся на один "
"символ вперед и попробуем снова со следующей позиции в тексте."

# 1023da55f58742beac4fe89b9cce8027
#: ../../faq.rst:147
msgid ""
"So, if you use ``a,b+?`` it'll match ``a,b``. In case of ``a+?,b+?`` it's"
" now not recommended (we add non-greedy modifyer) but still possible to "
"match more then one ``a``, so TRegExpr will do it."
msgstr ""
"Если вы используете ``a,b+?`` то это будет соответствовать ``a,b``. В "
"случае ``a+?,b+?``, не смотря на не жадный модификатор, все же возможно "
"захватить более одного ``a``, поэтому TRegExpr сделает это."

# 647ede57ab464622bd6b39c99ec24fe9
#: ../../faq.rst:151
msgid ""
"TRegExpr like Perl's or Unix's r.e. doesn't attempt to move forward and "
"check - would it will be \"better\" match. Fisrt of all, just because "
"there is no way to say it's more or less good match."
msgstr ""
"Регулярные выражения, не пытаются двигаться дальше по тексту и проверять "
"- удастся ли найти \"лучшее\" совпадение. Хотя бы потому, что нельзя "
"сказать, что такое \"лучше\"."

# 3b9fe775d8e04ab1b6d9aa67797e4fe2
#: ../../faq.rst:157
msgid "How can I use TRegExpr with Borland C++ Builder?"
msgstr "Как использовать TRegExpr с Borland C ++ Builder?"

# 3a3668dfca184d12a2f22a204d0bea67
#: ../../faq.rst:159
msgid "I have a problem since no header file (``.h`` or ``.hpp``) is available."
msgstr "У меня проблема, нет файла заголовка (``.h`` или ``.hpp``)."

# eb921fd58b9b44989ad4980de9c1dcb6
#: ../../faq.rst:163
msgid "Add ``RegExpr.pas`` to ``bcb`` project."
msgstr "Добавьте ``RegExpr.pas`` к проекту ``bcb``."

# 7ebb72e486c64aafa405f28a1d9acda7
#: ../../faq.rst:164
msgid "Compile project. This generates the header file ``RegExpr.hpp``."
msgstr "Скомпилировать проект. Это создает заголовочный файл ``RegExpr.hpp``."

# 485207ee444e42fbb7546e46f4630c97
#: ../../faq.rst:165
msgid "Now you can write code which uses the ``RegExpr`` unit."
msgstr "Теперь вы можете писать код, использующий модуль ``RegExpr``."

# 3ef58f66d6124b679e7e809e6ebb08af
#: ../../faq.rst:166
msgid "Don't forget to add  ``#include “RegExpr.hpp”`` where needed."
msgstr "Не забудьте добавить ``#include “RegExpr.hpp”`` там, где это необходимо."

# 779317d8bb2043b3b83e8c4572b02d0a
#: ../../faq.rst:167
msgid ""
"Don't forget to replace all ``\\`` in regular expressions with ``\\\\`` "
"or redefined `EscChar <tregexpr.html#escchar>`__ const."
msgstr ""
"Не забудьте заменить все ``\\`` в регулярных выражениях на ``\\`` или "
"переопределить `EscChar <tregexpr.html#escchar>`_ const."

# 8c9f9839a5d545d4be6fb30ae704f77e
#: ../../faq.rst:171
msgid ""
"Why many r.e. (including r.e. from TRegExpr help and demo) work wrong in "
"Borland C++ Builder?"
msgstr ""
"Почему многие примеры (включая примеры из документации) работают "
"неправильно в Borland C ++ Builder?"

# 9168003d88604c71b5fd773dc644e117
#: ../../faq.rst:175
msgid ""
"The hint is in the previous question ;) Symbol ``\\`` has special meaning"
" in ``C++``, so you have to ``escape`` it (as described in previous "
"answer). But if you don't like r.e. like ``\\\\w+\\\\\\\\w+\\\\.\\\\w+`` "
"you can redefine the constant ``EscChar`` (in ``RegExpr.pas``). For "
"example ``EscChar = \"/\"``. Then you can write ``/w+/w+/./w+``, looks "
"unusual but more readable."
msgstr ""
"Подсказка есть в предыдущем вопросе;) Символ ``\\`` имеет особое значение"
" в ``C ++``, поэтому вы должны ``эскейпить`` его (как описано в "
"предыдущем ответе). Но если вам не нравится, как выглядит "
"``\\w+\\\\w+\\.\\w+``, вы можете переопределить константу ``EscChar`` (в "
"``RegExpr.pas``). Скажем, ``EscChar = \"/\"``. Затем вы можете написать "
"``/w+/w+/. /W+`` - выглядит необычно, но более читабельно."

# 7317170c1b5148d49eaf5658800b28f1
#: ../../faq.rst:184
msgid "Why TRegExpr does not work with regex with #0 inside?"
msgstr "Почему TRegExpr не работает со строками с #0 внутри?"

# fd3e6f7f17ec417c8ef21374c88dd26e
#: ../../faq.rst:188
msgid ""
"The TRegExpr parser does support input strings with #0 chars. The support"
" was added by [Alexey-T](https://github.com/Alexey-T)."
msgstr ""
"Поддержка строк с нулевыми символами была добавлена в TRegExpr в 2019 году "
"[Alexey-T](https://github.com/Alexey-T)."

# 9942c7c9068b44179d1618294123cc2a
#: ../../faq.rst:191
msgid "But at the moment #0 chars insire regex are not supported."
msgstr ""
"Но нулевые символы внутри самого регулярного выражения так и не "
"поддерживаются."

# 4a95a45ae6ef45479f620c97dca9223c
#: ../../faq.rst:193
msgid ""
"So you can parse text with `#0`-chars inside it but you cannot use regex "
"with `#0`-chars or `\\x00` expression inside."
msgstr ""
"Таким образом вы можете обрабатывать текст с нулевыми символами но не можете "
"вставлять нулевые символы или выражения `\\x00` в регулярное выражение."

# 8c7a115a5d18412ca3b276de6978645a
#~ msgid ""
#~ "The TRegExpr parser convert all strings"
#~ " to PChars and internally all "
#~ "processing are based on #0k-terminated"
#~ " PChars."
#~ msgstr ""
#~ "Парсер TRegExpr преобразует все строки в"
#~ " PChars, внутренне вся обработка основана"
#~ " на PChars."

# 28d625d553ad49b591763bf49d5fb880
#~ msgid ""
#~ "To make it work with #0 chars "
#~ "we need a big effort. Are you "
#~ "going to volunteer to fix that?"
#~ msgstr ""
#~ "Чтобы работать с #0 символами, нужно "
#~ "приложить большие усилия. Вы готовы "
#~ "вызваться добровольцем?"
