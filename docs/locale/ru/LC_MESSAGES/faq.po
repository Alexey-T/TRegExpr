# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Andrey Sorokin
# This file is distributed under the same license as the TRegExpr package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
# Translators:
# Andrey Sorokin <filbert@yandex.ru>, 2019
msgid ""
msgstr ""
"Project-Id-Version: TRegExpr 0.952\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-26 13:41+0300\n"
"PO-Revision-Date: 2019-10-26 10:49+0000\n"
"Last-Translator: Andrey Sorokin <filbert@yandex.ru>\n"
"Language-Team: Russian <https://hosted.weblate.org/projects/tregexpr/faq/ru/>"
"\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<="
"4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
"X-Generator: Weblate 3.9.1-dev\n"
"Generated-By: Babel 2.3.4\n"

# 8b91b48aa8cc4fa6989704106b075f9b
#: ../../faq.rst:6
msgid "English"
msgstr "`English <https://regex.sorokin.engineer/en/latest/faq.html>`__"

# de8eaec964b44caa969d4c0554260f18
#: ../../faq.rst:7
msgid "`Русский <https://regex.sorokin.engineer/ru/latest/faq.html>`__"
msgstr "Русский"

# 5b034b6ed0fd4e8eb43b54c7af919236
#: ../../faq.rst:8
msgid "`Deutsch <https://regex.sorokin.engineer/de/latest/faq.html>`__"
msgstr "`Deutsch <https://regex.sorokin.engineer/de/latest/faq.html>`__"

# 30275a62ea3b485dad6213838e7cef44
#: ../../faq.rst:9
msgid "`Български <https://regex.sorokin.engineer/bg/latest/faq.html>`__"
msgstr "`Български <https://regex.sorokin.engineer/bg/latest/faq.html>`__"

# 4bfdf6e0a993484180e08f82511217d4
#: ../../faq.rst:10
msgid "`Français <https://regex.sorokin.engineer/fr/latest/faq.html>`__"
msgstr "`Français <https://regex.sorokin.engineer/fr/latest/faq.html>`__"

# 26f7df8f207445a7b791f6271a151d29
#: ../../faq.rst:11
msgid "`Español <https://regex.sorokin.engineer/es/latest/faq.html>`__"
msgstr "`Español <https://regex.sorokin.engineer/es/latest/faq.html>`__"

# f4c5d9543b744cefaa7403e79a14612f
#: ../../faq.rst:14
msgid "FAQ"
msgstr "Часто задаваемые вопросы"

# 9d3d7b3a9c734313b57e8cb0b4901cdb
#: ../../faq.rst:17
msgid "I found a terrible bug: TRegExpr raises Access Violation exception!"
msgstr "Я обнаружил ужасную ошибку: TRegExpr вызывает исключение Access Violation!"

# ace139c552db474ba39e0daa651c0daf
# a9d0e107500348919c95fcec7ad22651
# 04f6ceb1e42a47da98c095c1e10a0984
# 8af8f4daa99549cc9d8319053bf3c32a
# 1cc25edebc32455ba0a3efb294db4ada
# 00d7961f3bad4f479aedf0242255e555
# 3b0b6ba80aa948e783a39ab9e0e58f0e
# ed3681da4ce948c482690f6afb8fb8c5
# feea56036d58492094e1d31967becbca
# 2d9ed3e1f7ae46d180a969f71e21797c
# 223ecf4e33b141cba16ad42fd010bfb1
#: ../../faq.rst:19 ../../faq.rst:44 ../../faq.rst:54 ../../faq.rst:70
#: ../../faq.rst:83 ../../faq.rst:103 ../../faq.rst:114 ../../faq.rst:134
#: ../../faq.rst:161 ../../faq.rst:173 ../../faq.rst:186
msgid "**Answer**"
msgstr "**Ответ**"

# aa5401bb8d154a31b530a511217062db
#: ../../faq.rst:21
msgid ""
"You must create the object before usage. So, after you declared something"
" like:"
msgstr ""
"Вы должны создать объект перед использованием. Итак, после того, как вы "
"объявили что-то вроде:"

# eca009ee9dbd4f7c8edc26ab7b79cbed
#: ../../faq.rst:24
msgid "r : TRegExpr"
msgstr "r: TRegExpr"

# adf7e68737db4f318715259407cacfeb
#: ../../faq.rst:28
msgid "do not forget to create the object instance:"
msgstr "не забудьте создать экземпляр объекта:"

# 2d2cd9a824d44bf0a270e4bd89ebb334
#: ../../faq.rst:30
msgid "r := TRegExpr.Create."
msgstr "r: = TRegExpr.Create."

# 6c23b4624c4446cb96a88dc880a175f6
#: ../../faq.rst:35
msgid "Regular expressions with (?=...) do not work"
msgstr "Регулярные выражения с (? = ...) не работают"

# dd699bf2d1e343faa9f008afce89241b
#: ../../faq.rst:37
msgid ""
"Look ahead is not implemented in the TRegExpr. But in many cases you can "
"easily `replace it with simple subexpressions "
"<regular_expressions.html#lookahead>`_."
msgstr ""
"Look-ahead не реализованы в TRegExpr. Но во многих случаях вы можете "
"легко заменить их простыми `подвыражениями "
"<regular_expressions.html#lookahead>`_."

# 86e279db0f2a4191bbad43ddc6f6e72f
#: ../../faq.rst:42
msgid "Does it support Unicode?"
msgstr "Поддерживает ли он Юникод?"

# f77cadf056444008ae8430cd57745a0a
#: ../../faq.rst:46
msgid "`How to use Unicode <tregexpr.html#unicode>`__"
msgstr "`Как использовать Юникод <tregexpr.html#unicode>`__"

# 9bbce3d11e354a42a81f07c7800ac04f
#: ../../faq.rst:49
msgid "Why does TRegExpr return more then one line?"
msgstr "Почему TRegExpr возвращает более одной строки?"

# ca3bc0d659264d9a986005d388d99a22
#: ../../faq.rst:51
msgid ""
"For example, r.e. ``<font .\\*>`` returns the first ``<font``, then the "
"rest of the file including last ``</html>``."
msgstr ""
"Например, регулярное выражение ``<font .\\*>`` возвращает первый же "
"``<font``, далее весь последующий текст до финального``</html>``."

# 1d3c88ed2a134a19b7cdae39e3dad1fb
#: ../../faq.rst:56
msgid ""
"For backward compatibility, `modifier /s "
"<regular_expressions.html#modifier_s>`__ is ``On`` by default."
msgstr ""
"Для обратной совместимости `модификатор /s "
"<regular_expressions.html#modifier_s>`_ по умолчанию ``Вкл``."

# 9d6754378b234933acae90469163d133
#: ../../faq.rst:59
msgid ""
"Switch it Off and ``.`` will match any but `Line separators "
"<regular_expressions.html#syntax_line_separators>`__ - exactly as you "
"wish."
msgstr ""
"Выключите его, и ``.`` будет соответствовать любому символу, кроме "
"`Разделителей строк <regular_expressions.html#syntax_line_separators>`_ -"
" именно так, как вы хотите."

# 9e4b34f73bc94f32bbf649d10793e127
#: ../../faq.rst:62
msgid "BTW I suggest ``<font ([^\\n>]*)>``, in ``Match[1]`` will be the URL."
msgstr "Я лично предлагаю ``<font ([^\\n>] *)>``, тогда в ``Match [1]`` будет URL."

# 0cb563a1ae9d4d5bb9dc46b6ecfc90d2
#: ../../faq.rst:65
msgid "Why does TRegExpr return more then I expect?"
msgstr "Почему TRegExpr возвращает больше, чем я ожидаю?"

# af83ab7928d54746abad0592dc967ff3
#: ../../faq.rst:67
msgid ""
"For example r.e. ``<p>(.+)</p>`` applyed to string ``<p>a</p><p>b</p>`` "
"returns ``a</p><p>b`` but not ``a`` as I expected."
msgstr ""
"Например ``<p> (. +) </p>`` для строки ``<p>a </p><p> b </p>`` возвращает"
" ``a </p><p> b`` но не ``a``, как ожидается."

# 1c546cbcc27543e1828cc89aafa7082f
#: ../../faq.rst:72
msgid ""
"By default all operators works in ``greedy`` mode, so they match as more "
"as it possible."
msgstr ""
"По умолчанию все операторы работают в ``жадном`` режиме, поэтому они "
"совпадают как можно больше."

# 4bc5407d2acf4901a04110d5fcdf24e9
#: ../../faq.rst:75
msgid ""
"If you want ``non-greedy`` mode you can use ``non-greedy`` operators like"
" ``+?`` and so on or switch all operators into ``non-greedy`` mode with "
"help of modifier ``g`` (use appropriate TRegExpr properties or operator "
"``?(-g)`` in r.e.)."
msgstr ""
"Если вам нужен режим ``не жадный режим``, вы можете использовать ``не "
"жадные`` варианты операторов, такие как ``+?`` и т. д., или переключить "
"все операторы в ``не жадный`` режим с помощью модификатора ``g`` "
"(используйте соответствующие свойства TRegExpr или оператор ``?(-g)`` "
"внутри выражения)."

# a5ecf81a5374494a981df531cbd30c5f
#: ../../faq.rst:81
msgid "How to parse sources like HTML with help of TRegExpr?"
msgstr "Как анализировать HTML, с помощью TRegExpr?"

# 53e7aca1bcc846ac992b0955347782b0
#: ../../faq.rst:85
msgid "Sorry folks, but it's nearly impossible!"
msgstr "Извините, ребята, но это почти невозможно!"

# f0ff947789034c17b931a65a3e9dea59
#: ../../faq.rst:87
msgid ""
"Of course, you can easily use TRegExpr for extracting some information "
"from HTML, as shown in my examples, but if you want accurate parsing you "
"have to use real parser, not r.e."
msgstr ""
"Конечно, вы можете легко использовать TRegExpr для извлечения некоторой "
"информации из HTML, как показано в моих примерах, но если вам нужен "
"точный синтаксический анализ, вы должны использовать полноценный парсер, "
"а не"

# 8c033d5410014914bb489d51e80a89af
#: ../../faq.rst:91
msgid ""
"You can read full explanation in Tom Christiansen and Nathan Torkington "
"``Perl Cookbook``, for example."
msgstr ""
"Вы можете прочитать полное объяснение в Том Кристиансен и Натан "
"Торкингтон ``Perl Cookbook``, например."

# fdc4d0c9b7e74c74918fabe35cdcc25a
#: ../../faq.rst:94
msgid ""
"In short - there are many structures that can be easy parsed by real "
"parser but cannot at all by r.e., and real parser is much faster to do "
"the parsing, because r.e. doesn't simply scan input stream, it performs "
"optimization search that can take a lot of time."
msgstr ""
"Вкратце - есть много структур, которые могут быть легко проанализированы "
"реальным парсером, но не могут быть проанализированы регулярными "
"выражениями. Полноценный парсер намного быстрее выполнит синтаксический "
"анализ."

# 9c71fc46337846998fb6a0ee855dd9c9
#: ../../faq.rst:101
msgid "Is there a way to get multiple matches of a pattern on TRegExpr?"
msgstr "Есть ли способ получить несколько совпадений шаблона на TRegExpr?"

# 377af4e77ecc4dbeb4ea6278a4a3e34c
#: ../../faq.rst:105
msgid "You can iterate matches with ExecNext method."
msgstr "Вы искать последующие совпадения с помощью метода ExecNext."

# bf61bcf537e84477ba2367b56f92d8b7
#: ../../faq.rst:107
msgid ""
"If you want some example, please take a look at ``TRegExpr.Replace`` "
"method implementation or at the examples for `HyperLinksDecorator "
"<demos.html>`_"
msgstr ""
"Если вам нужен какой-то пример, посмотрите на реализацию метода "
"``TRegExpr.Replace`` или на примеры для `HyperLinksDecorator "
"<demos.html>`_"

# 4dedc5f5e32946a4b3440dd9bea863a2
#: ../../faq.rst:112
msgid ""
"I am checking user input. Why does TRegExpr return ``True`` for wrong "
"input strings?"
msgstr ""
"Я проверяю пользовательский ввод. Почему TRegExpr возвращает ``True`` для"
" неправильных входных строк?"

# dc6abd55eada40e7948ade41a508bbad
#: ../../faq.rst:116
msgid ""
"In many cases TRegExpr users forget that regular expression is for "
"**search** in input string."
msgstr ""
"Во многих случаях пользователи TRegExpr забывают, что регулярное "
"выражение предназначено для **поиска** во входной строке."

# 8ea46cd41a804258930bda50eb03453c
#: ../../faq.rst:119
msgid ""
"So, for example if you use ``\\d{4,4}`` expression, you will get success "
"for wrong user inputs like ``12345`` or ``any letters 1234``."
msgstr ""
"Так, например,  выражение ``\\d{4,4}`` совпадет и с ``12345`` и с ``любые"
" буквы 1234``."

# 51604eec8f1a4b6397435d2e558b294d
#: ../../faq.rst:122
msgid ""
"You have to check from line start to line end to ensure there are no "
"anything else around: ``^\\d{4,4}$``."
msgstr ""
"Вы должны проверить от начала строки до конца строки, чтобы убедиться, "
"что вокруг ничего больше нет: ``^\\d{4,4}$``."

# 3c95393d60c64116a7b3bc0d86c57cac
#: ../../faq.rst:128
msgid "Why does non-greedy iterators sometimes work as in greedy mode?"
msgstr "Почему не жадные итераторы иногда работают в жадном режиме?"

# 6a94e68f92e1432481182e29373d2f1f
#: ../../faq.rst:130
msgid ""
"For example, the r.e. ``a+?,b+?`` applied to string ``aaa,bbb`` matches "
"``aaa,b``, but should it not match ``a,b`` because of non-greediness of "
"first iterator?"
msgstr ""
"Например, ``a+?,b+?``, для строки ``aaa,bbb``, найдет ``aaa,b``, но не "
"``a,b`` хотя первый итератор не жаден?"

# 0abe79b4fc0d4aec80fbbc6cb4de06e2
#: ../../faq.rst:136
msgid ""
"This is because of TRegExpr way to work. In fact many others r.e. engines"
" work exactly the same: they performe only ``simple`` search "
"optimization, and do not try to do the best optimization."
msgstr ""
"Регулярные выражения только ищут первое же совпадение и не пытаются найти"
" \"наилучшее\" совпадение."

# 35e4650d4ecf4bb1a7544658ab8bad07
#: ../../faq.rst:140
msgid ""
"In some cases it's bad, but in common it's rather advantage then "
"limitation, because of performance and predictability reasons."
msgstr ""
"В некоторых случаях это плохо, но в целом это скорее преимущество, чем "
"ограничение, по причинам производительности и предсказуемости."

# d5fc27db2e49486c859a0696c2f3947f
#: ../../faq.rst:143
msgid ""
"The main rule - r.e. first of all try to match from current place and "
"only if that's completely impossible move forward by one char and try "
"again from next position in the text."
msgstr ""
"Основное правило - сначала пытаемся найти соотвествие, начиная с текущей "
"позиции в строке и, только если это невозможно, продвигаемся на один "
"символ вперед и попробуем снова со следующей позиции в тексте."

# 36fd9a7e76324f84a3bda28ccd3b1b8e
#: ../../faq.rst:147
msgid ""
"So, if you use ``a,b+?`` it'll match ``a,b``. In case of ``a+?,b+?`` it's"
" now not recommended (we add non-greedy modifyer) but still possible to "
"match more then one ``a``, so TRegExpr will do it."
msgstr ""
"Если вы используете ``a,b+?`` то это будет соответствовать ``a,b``. В "
"случае ``a+?,b+?``, не смотря на не жадный модификатор, все же возможно "
"захватить более одного ``a``, поэтому TRegExpr сделает это."

# 6d3322cb2d6a4ac6a79ef91632c9d04c
#: ../../faq.rst:151
msgid ""
"TRegExpr like Perl's or Unix's r.e. doesn't attempt to move forward and "
"check - would it will be \"better\" match. Fisrt of all, just because "
"there is no way to say it's more or less good match."
msgstr ""
"Регулярные выражения, не пытаются двигаться дальше по тексту и проверять "
"- удастся ли найти \"лучшее\" совпадение. Хотя бы потому, что нельзя "
"сказать, что такое \"лучше\"."

# e7b4ac68b8dc440da1b092a3e4be7f69
#: ../../faq.rst:157
msgid "How can I use TRegExpr with Borland C++ Builder?"
msgstr "Как использовать TRegExpr с Borland C ++ Builder?"

# e3175e4aaf3e4a4286a23bcf99325e70
#: ../../faq.rst:159
msgid "I have a problem since no header file (``.h`` or ``.hpp``) is available."
msgstr "У меня проблема, нет файла заголовка (``.h`` или ``.hpp``)."

# 56e168e7f59f406584b26e23f454de7d
#: ../../faq.rst:163
msgid "Add ``RegExpr.pas`` to ``bcb`` project."
msgstr "Добавьте ``RegExpr.pas`` к проекту ``bcb``."

# 564dbd5c8a054246be9e733a5bfc8081
#: ../../faq.rst:164
msgid "Compile project. This generates the header file ``RegExpr.hpp``."
msgstr "Скомпилировать проект. Это создает заголовочный файл ``RegExpr.hpp``."

# 458a6e97f830430b9c392329c3551f4d
#: ../../faq.rst:165
msgid "Now you can write code which uses the ``RegExpr`` unit."
msgstr "Теперь вы можете писать код, использующий модуль ``RegExpr``."

# 5c694c5ffce044dc89eb33065913b119
#: ../../faq.rst:166
msgid "Don't forget to add  ``#include “RegExpr.hpp”`` where needed."
msgstr "Не забудьте добавить ``#include “RegExpr.hpp”`` там, где это необходимо."

# dae10011da1a4048bdee249504151e87
#: ../../faq.rst:167
msgid ""
"Don't forget to replace all ``\\`` in regular expressions with ``\\\\`` "
"or redefined `EscChar <tregexpr.html#escchar>`__ const."
msgstr ""
"Не забудьте заменить все ``\\`` в регулярных выражениях на ``\\`` или "
"переопределить `EscChar <tregexpr.html#escchar>`_ const."

# 264106ace4e942d59634d2831942aaa9
#: ../../faq.rst:171
msgid ""
"Why many r.e. (including r.e. from TRegExpr help and demo) work wrong in "
"Borland C++ Builder?"
msgstr ""
"Почему многие примеры (включая примеры из документации) работают "
"неправильно в Borland C ++ Builder?"

# eb9cfc8291e141f591ea9c3c4341f5b4
#: ../../faq.rst:175
msgid ""
"The hint is in the previous question ;) Symbol ``\\`` has special meaning"
" in ``C++``, so you have to ``escape`` it (as described in previous "
"answer). But if you don't like r.e. like ``\\\\w+\\\\\\\\w+\\\\.\\\\w+`` "
"you can redefine the constant ``EscChar`` (in ``RegExpr.pas``). For "
"example ``EscChar = \"/\"``. Then you can write ``/w+/w+/./w+``, looks "
"unusual but more readable."
msgstr ""
"Подсказка есть в предыдущем вопросе;) Символ ``\\`` имеет особое значение"
" в ``C ++``, поэтому вы должны ``эскейпить`` его (как описано в "
"предыдущем ответе). Но если вам не нравится, как выглядит "
"``\\w+\\\\w+\\.\\w+``, вы можете переопределить константу ``EscChar`` (в "
"``RegExpr.pas``). Скажем, ``EscChar = \"/\"``. Затем вы можете написать "
"``/w+/w+/. /W+`` - выглядит необычно, но более читабельно."

# d71401485c1640b29d19998af0548ae7
#: ../../faq.rst:184
msgid "Why TRegExpr does not work with strings with #0 inside?"
msgstr "Почему TRegExpr не работает со строками с #0 внутри?"

# 8c7a115a5d18412ca3b276de6978645a
#: ../../faq.rst:188
msgid ""
"The TRegExpr parser convert all strings to PChars and internally all "
"processing are based on #0k-terminated PChars."
msgstr ""
"Парсер TRegExpr преобразует все строки в PChars, внутренне вся обработка "
"основана на PChars."

# 28d625d553ad49b591763bf49d5fb880
#: ../../faq.rst:191
msgid ""
"To make it work with #0 chars we need a big effort. Are you going to "
"volunteer to fix that?"
msgstr ""
"Чтобы работать с #0 символами, нужно приложить большие усилия. Вы готовы "
"вызваться добровольцем?"
