# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Andrey Sorokin
# This file is distributed under the same license as the TRegExpr package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Andrey Sorokin <filbert@yandex.ru>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TRegExpr 0.952\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-30 13:00+0300\n"
"PO-Revision-Date: 2019-04-27 17:26+0000\n"
"Last-Translator: Andrey Sorokin <filbert@yandex.ru>, 2019\n"
"Language-Team: French (France) (https://www.transifex.com/masterAndrey/teams/98461/fr_FR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_FR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

# 14a0920e6f3d4940ba98aa198a3c6907
#: ../../faq.rst:2
msgid "FAQ"
msgstr "FAQ"

# 409efcd46f2e4c9a9437e22fa24db8fd
#: ../../faq.rst:5
msgid "I found a terrible bug: TRegExpr raises Access Violation exception!"
msgstr ""
"J&#39;ai trouvé un bug terrible: TRegExpr déclenche une exception de "
"violation d&#39;accès!"

# a2842b65546a4441b1b69e312c0f3211
# 8cd2ff7bcb3e4c0088e1e9b725a7cc4f
# f0c2b01cf27846f987b328f52d6ab2d1
# 2de098aa7cb54981b31e08f94a01aaf5
# e3e118ae88494988bc0773ea83cc2cba
# 131e2b6f59a34514aa47cec67c20e7db
# 9467fd30ee024abc96834213cf1a3105
# 90dc0be1b9eb424b84be320e8db403d0
# f307053ecaa44cb5b95fe6d78b69dc41
#: ../../faq.rst:7 ../../faq.rst:27 ../../faq.rst:39 ../../faq.rst:55
#: ../../faq.rst:71 ../../faq.rst:84 ../../faq.rst:104 ../../faq.rst:115
#: ../../faq.rst:135
msgid "**Answer**"
msgstr "**Réponse**"

# bca1dc47646e46b2acc136934e8b2115
#: ../../faq.rst:9
msgid ""
"You must create the object before usage. So, after you declared something "
"like:"
msgstr ""
"Vous devez créer l&#39;objet avant utilisation. Donc, après avoir déclaré "
"quelque chose comme:"

# 008a45e0501e4be78de2b2c2fbaf464f
#: ../../faq.rst:16
msgid "do not forget to create the object instance:"
msgstr "n&#39;oubliez pas de créer l&#39;instance d&#39;objet:"

# e78ed133fdd64baab8febfca8fdd52fb
#: ../../faq.rst:23
msgid "How can I use TRegExpr with Borland C++ Builder?"
msgstr "Comment utiliser TRegExpr avec Borland C ++ Builder?"

# 86b2c2279e9c48dfb136edfb532cd445
#: ../../faq.rst:25
msgid ""
"I have a problem since no header file (``.h`` or ``.hpp``) is available."
msgstr ""
"J&#39;ai un problème car aucun fichier d&#39;en-tête (`` .h`` ou `` .hpp``) "
"n&#39;est disponible."

# dfbcc43803f04e2aa9353cbd660a5eb8
#: ../../faq.rst:29
msgid "Add ``RegExpr.pas`` to ``bcb`` project."
msgstr "Ajoutez `` RegExpr.pas`` au projet `` bcb``."

# f1a826fa077741ba8389a5bee9976ae3
#: ../../faq.rst:30
msgid "Compile project. This generates the header file ``RegExpr.hpp``."
msgstr ""
"Compiler le projet. Cela génère le fichier d’en-tête `` RegExpr.hpp``."

# af15bcbbde874b738ea988f1ec14001e
#: ../../faq.rst:31
msgid "Now you can write code which uses the ``RegExpr`` unit."
msgstr "Vous pouvez maintenant écrire du code utilisant l’unité `` RegExpr``."

# 74a3a3d158264b388913bcf7fdb37593
#: ../../faq.rst:32
msgid "Don't forget to add  ``#include “RegExpr.hpp”`` where needed."
msgstr ""
"N&#39;oubliez pas d&#39;ajouter «#include« RegExpr.hpp »` `si nécessaire."

# b38915e941b64829bbe56c2e3ab66519
#: ../../faq.rst:33
msgid ""
"Don't forget to replace all ``\\`` in regular expressions with ``\\\\`` or "
"redefined `EscChar <tregexpr_interface.html#escchar>`__ const."
msgstr ""
"N&#39;oubliez pas de remplacer tous les `` \\ `` dans les expressions "
"régulières par `` \\\\ `` ou redéfinis `EscChar "
"<tregexpr_interface.html#escchar> `__ const."

# cb41f5b7912e432bb9da287b121cbdae
#: ../../faq.rst:37
msgid ""
"Why many r.e. (including r.e. from TRegExpr help and demo) work wrong in "
"Borland C++ Builder?"
msgstr ""
"Pourquoi beaucoup de solutions (y compris de l&#39;aide et de la "
"démonstration TRegExpr) fonctionnent-elles mal dans Borland C ++ Builder?"

# 0f73f257d9514302b0957d8a0e7a541f
#: ../../faq.rst:41
msgid ""
"The hint is in the previous question ;) Symbol ``\\`` has special meaning in"
" ``C++``, so you have to ``escape`` it (as described in previous answer). "
"But if you don't like r.e. like ``\\\\w+\\\\\\\\w+\\\\.\\\\w+`` you can "
"redefine the constant ``EscChar`` (in ``RegExpr.pas``). For example "
"``EscChar = \"/\"``. Then you can write ``/w+/w+/./w+``, looks unusual but "
"more readable."
msgstr ""
"Le conseil se trouve dans la question précédente;) Le symbole `` `` a une "
"signification particulière dans `` C ++ ``, il faut donc `` y échapper`` "
"(comme décrit dans la réponse précédente). Mais si vous n&#39;aimez pas les "
"choses comme `` \\\\ w + \\\\\\\\ w + \\\\. \\\\ w + ``, vous pouvez "
"redéfinir la constante `` EscChar`` (dans `` RegExpr.pas``). Par exemple `` "
"EscChar = &quot;/&quot; ``. Ensuite, vous pouvez écrire `` / w + / w + /. / "
"W + ``, semble inhabituel mais plus lisible."

# 36695be1d9ec4d4aa713b26c2274ab6f
#: ../../faq.rst:50
msgid "Why does TRegExpr return more then one line?"
msgstr "Pourquoi TRegExpr renvoie-t-il plus d&#39;une ligne?"

# 88f899a2a3a94c00994ab9518a100e30
#: ../../faq.rst:52
msgid ""
"For example, r.e. ``<font .\\*>`` returns the first ``<font``, then the rest"
" of the file including last ``</html>``."
msgstr ""
"Par exemple, re `` <font .\\*>`` renvoie le premier ``</font> <font``, then "
"the rest of the file including last ``</html> <font .\\*>``.</font>"

# e0575b3e984b464db5c9c891fae78696
#: ../../faq.rst:57
msgid ""
"For backward compatibility, `modifier /s <regexp_syntax.html#modifier_s>`__ "
"is ``On`` by default."
msgstr ""
"Pour la compatibilité ascendante, modificateur / s "
"<regexp_syntax.html#modifier_s> `__ est` `On`` par défaut."

# b46cbeccc5b0433f9702d6e28f98b4fe
#: ../../faq.rst:60
msgid ""
"Switch it Off and ``.`` will match any but `Line separators "
"<regexp_syntax.html#syntax_line_separators>`__ - exactly as you wish."
msgstr ""
"Eteignez-le et `` .`` correspondra à tout sauf `séparateurs de lignes "
"<regexp_syntax.html#syntax_line_separators> `__ - exactement comme vous le "
"souhaitez."

# 6c572634b3d944b58f8f0d3f952ea759
#: ../../faq.rst:63
msgid "BTW I suggest ``<font ([^\\n>]*)>``, in ``Match[1]`` will be the URL."
msgstr ""
"BTW, je suggère &quot;` <font ([^\\n>] *)&gt; &quot;, dans&quot; Match [1] "
"&quot;sera l&#39;URL.</font>"

# 990efeb8bd2e41adbbe07e2fc3e3a610
#: ../../faq.rst:66
msgid "Why does TRegExpr return more then I expect?"
msgstr "Pourquoi TRegExpr renvoie-t-il plus que ce à quoi je m&#39;attendais?"

# 80ee47319d05423982e55c8dbab25933
#: ../../faq.rst:68
msgid ""
"For example r.e. ``<p>(.+)</p>`` applyed to string ``<p>a</p><p>b</p>`` "
"returns ``a</p><p>b`` but not ``a`` as I expected."
msgstr ""
"Par exemple re `` <p> (. +) </p> `` appliqué à la chaîne `` <p> une </p><p> "
"b </p> `` renvoie `` a </p><p> b`` mais pas `` a`` comme je m&#39;y "
"attendais."

# 32bf658773da4d91a5d8bd6900393614
#: ../../faq.rst:73
msgid ""
"By default all operators works in ``greedy`` mode, so they match as more as "
"it possible."
msgstr ""
"Par défaut, tous les opérateurs fonctionnent en mode `` greedy``, de sorte "
"qu&#39;ils correspondent le plus possible."

# a08254f8c0504a6a9ccfdd10e3b334d8
#: ../../faq.rst:76
msgid ""
"If you want ``non-greedy`` mode you can use ``non-greedy`` operators like "
"``+?`` and so on or switch all operators into ``non-greedy`` mode with help "
"of modifier ``g`` (use appropriate TRegExpr properties or operator ``?(-g)``"
" in r.e.)."
msgstr ""
"Si vous voulez le mode `` non-gourmand``, vous pouvez utiliser des "
"opérateurs `` non-gloutons`` comme `` +? `` Et ainsi de suite ou basculer "
"tous les opérateurs en mode `` non-gloutons`` avec l&#39;aide du "
"modificateur ` `g`` (utilisez les propriétés TRegExpr appropriées ou "
"l&#39;opérateur` `?? (- g)` `dans re)."

# 2eadee7057dc4226a18bff60bc9e240b
#: ../../faq.rst:82
msgid "How to parse sources like HTML with help of TRegExpr"
msgstr "Comment analyser des sources comme HTML avec l&#39;aide de TRegExpr"

# 7b05da52c9fa4bd6921ecdf3523b1f1a
#: ../../faq.rst:86
msgid "Sorry folks, but it's nearly impossible!"
msgstr "Désolé les gars, mais c&#39;est presque impossible!"

# 7c2264dd8c4f42ddaba11aab9e787296
#: ../../faq.rst:88
msgid ""
"Of course, you can easily use TRegExpr for extracting some information from "
"HTML, as shown in my examples, but if you want accurate parsing you have to "
"use real parser, not r.e."
msgstr ""
"Bien sûr, vous pouvez facilement utiliser TRegExpr pour extraire certaines "
"informations à partir de HTML, comme indiqué dans mes exemples, mais si vous"
" souhaitez une analyse précise, vous devez utiliser un analyseur syntaxique "
"réel."

# 186382f57c884e25bac133c13dc4c85a
#: ../../faq.rst:92
msgid ""
"You can read full explanation in Tom Christiansen and Nathan Torkington "
"``Perl Cookbook``, for example."
msgstr ""
"Vous pouvez lire une explication complète dans Tom Christiansen et Nathan "
"Torkington, `` Perl Cookbook``, par exemple."

# 8d1ebbae47894046b35030a66ceaaba6
#: ../../faq.rst:95
msgid ""
"In short - there are many structures that can be easy parsed by real parser "
"but cannot at all by r.e., and real parser is much faster to do the parsing,"
" because r.e. doesn't simply scan input stream, it performs optimization "
"search that can take a lot of time."
msgstr ""
"En bref - il existe de nombreuses structures qui peuvent facilement être "
"analysées par un analyseur réel mais ne peuvent pas du tout être analysées. "
"Cet analyseur réel est beaucoup plus rapide à analyser, car il ne scanne pas"
" simplement le flux d&#39;entrée, il effectue une recherche "
"d&#39;optimisation pouvant prendre beaucoup de temps."

# 37cebd08189446c0986a89d2a1e76950
#: ../../faq.rst:102
msgid "Is there a way to get multiple matches of a pattern on TRegExpr?"
msgstr ""
"Existe-t-il un moyen d&#39;obtenir plusieurs correspondances d&#39;un modèle"
" sur TRegExpr?"

# 67ea59a609174651baf2bc3f5c5499ee
#: ../../faq.rst:106
msgid "You can iterate matches with ExecNext method."
msgstr "Vous pouvez itérer des correspondances avec la méthode ExecNext."

# 8111d5e6bde64675b36c3282e306f28a
#: ../../faq.rst:108
msgid ""
"If you want some example, please take a look at ``TRegExpr.Replace`` method "
"implementation or at the examples for `HyperLinksDecorator <demos.html>`_"
msgstr ""
"Si vous voulez quelques exemples, jetez un œil à l&#39;implémentation de la "
"méthode `` TRegExpr.Replace`` ou aux exemples de `HyperLinksDecorator "
"<demos.html> `_"

# a15668614ebd4fa7b0f3c04c7882ee53
#: ../../faq.rst:113
msgid ""
"I am checking user input. Why does TRegExpr return ``True`` for wrong input "
"strings?"
msgstr ""
"Je vérifie les entrées de l&#39;utilisateur. Pourquoi TRegExpr renvoie-t-il "
"`` True`` pour les chaînes d&#39;entrée incorrectes?"

# f355d9ab182546f5a2af687ca61f3f8b
#: ../../faq.rst:117
msgid ""
"In many cases TRegExpr users forget that regular expression is for "
"**search** in input string."
msgstr ""
"Dans de nombreux cas, les utilisateurs de TRegExpr oublient que "
"l&#39;expression régulière est utilisée pour ** rechercher ** dans la chaîne"
" de saisie."

# fd3d0fdde2be47c58298d4b51c71ca24
#: ../../faq.rst:120
msgid ""
"So, for example if you use ``\\d{4,4}`` expression, you will get success for"
" wrong user inputs like ``12345`` or ``any letters 1234``."
msgstr ""
"Ainsi, par exemple, si vous utilisez une expression `` \\ d {4,4} ``, vous "
"obtiendrez un succès pour les entrées utilisateur incorrectes telles que `` "
"12345`` ou `` toutes les lettres 1234``."

# 2b2c2bec51e145a6a08dfa5d828e76ae
#: ../../faq.rst:123
msgid ""
"You have to check from line start to line end to ensure there are no "
"anything else around: ``^\\d{4,4}$``."
msgstr ""
"Vous devez vérifier du début à la fin de la ligne pour vous assurer "
"qu&#39;il n&#39;y a plus rien d&#39;autre: `` ^ \\ d {4,4} $ ``."

# e0f9c502b38147f5a45030ee73df085a
#: ../../faq.rst:129
msgid "Why does non-greedy iterators sometimes work as in greedy mode?"
msgstr ""
"Pourquoi les itérateurs non-gourmands fonctionnent-ils parfois comme en mode"
" gourmand?"

# 3661c8c59e92415fbd3933c2770d2b0d
#: ../../faq.rst:131
msgid ""
"For example, the r.e. ``a+?,b+?`` applied to string ``aaa,bbb`` matches "
"``aaa,b``, but should it not match ``a,b`` because of non-greediness of "
"first iterator?"
msgstr ""
"Par exemple, le re `` a + ?, b +? `` Appliqué à la chaîne `` aaa, bbb`` "
"correspond à `` aaa, b``, mais ne devrait-il pas correspondre à `` a, b`` à "
"cause de la non-cupidité du premier itérateur?"

# 8dd2a4a1252b4e1cb6062de371209eae
#: ../../faq.rst:137
msgid ""
"This is because of TRegExpr way to work. In fact many others r.e. engines "
"work exactly the same: they performe only ``simple`` search optimization, "
"and do not try to do the best optimization."
msgstr ""
"C&#39;est à cause de la manière de TRegExpr de travailler. En fait, beaucoup"
" d&#39;autres moteurs fonctionnent exactement de la même manière: ils ne "
"font que l&#39;optimisation de la recherche `` simple``, et n&#39;essayent "
"pas de faire la meilleure optimisation."

# 95db1ec5d75a453b94a26c6b4b667319
#: ../../faq.rst:141
msgid ""
"In some cases it's bad, but in common it's rather advantage then limitation,"
" because of performance and predictability reasons."
msgstr ""
"Dans certains cas, c&#39;est mauvais, mais en commun, c&#39;est plutôt un "
"avantage que une limitation, pour des raisons de performance et de "
"prévisibilité."

# aa96a14dafb64cc69734a5fa7c521cc3
#: ../../faq.rst:144
msgid ""
"The main rule - r.e. first of all try to match from current place and only "
"if that's completely impossible move forward by one char and try again from "
"next position in the text."
msgstr ""
"La règle principale - essayez d’abord de faire la correspondance à partir de"
" l’emplacement actuel et seulement si cela est absolument impossible, "
"avancez d’un caractère et essayez à nouveau de la position suivante dans le "
"texte."

# d77ad26d44f946329cb98217a8304686
#: ../../faq.rst:148
msgid ""
"So, if you use ``a,b+?`` it'll match ``a,b``. In case of ``a+?,b+?`` it's "
"now not recommended (we add non-greedy modifyer) but still possible to match"
" more then one ``a``, so TRegExpr will do it."
msgstr ""
"Donc, si vous utilisez «a, b +?», Cela correspond à «a, b». Dans le cas de "
"`` a + ?, b +? ``, Ce n&#39;est plus recommandé (nous ajoutons un "
"modificateur non-glouton) mais il est toujours possible de faire "
"correspondre plus d&#39;un `` a``, donc TRegExpr le fera."

# 707e76258fd8485d9847a89037903ec4
#: ../../faq.rst:152
msgid ""
"TRegExpr like Perl's or Unix's r.e. doesn't attempt to move forward and "
"check - would it will be \"better\" match. Fisrt of all, just because there "
"is no way to say it's more or less good match."
msgstr ""
"TRegExpr comme Perl ou Unix ne tente pas d’avancer et de vérifier - ce "
"serait une &quot;meilleure&quot; correspondance. En premier lieu, juste "
"parce qu’il n’ya aucun moyen de dire que c’est plus ou moins bon."
